<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__file_validator_test_8java_source" xml:lang="en-US">
<title>FileValidatorTest.java</title>
<indexterm><primary>C:/Users/User1/git/FileChampion4j/src/test/java/dev/filechampion/filechampion4j/FileValidatorTest.java</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__file_validator_test_8java_source_1l00001"/>00001 <emphasis role="keyword">package&#32;</emphasis>dev.filechampion.filechampion4j;
<anchor xml:id="__file_validator_test_8java_source_1l00002"/>00002 
<anchor xml:id="__file_validator_test_8java_source_1l00003"/>00003 
<anchor xml:id="__file_validator_test_8java_source_1l00004"/>00004 <emphasis role="keyword">import</emphasis>&#32;org.json.JSONObject;
<anchor xml:id="__file_validator_test_8java_source_1l00005"/>00005 <emphasis role="keyword">import</emphasis>&#32;org.junit.jupiter.api.BeforeEach;
<anchor xml:id="__file_validator_test_8java_source_1l00006"/>00006 <emphasis role="keyword">import</emphasis>&#32;org.junit.jupiter.api.Test;
<anchor xml:id="__file_validator_test_8java_source_1l00007"/>00007 
<anchor xml:id="__file_validator_test_8java_source_1l00008"/>00008 <emphasis role="keyword">import</emphasis>&#32;com.itextpdf.text.Document;
<anchor xml:id="__file_validator_test_8java_source_1l00009"/>00009 <emphasis role="keyword">import</emphasis>&#32;com.itextpdf.text.PageSize;
<anchor xml:id="__file_validator_test_8java_source_1l00010"/>00010 <emphasis role="keyword">import</emphasis>&#32;com.itextpdf.text.Paragraph;
<anchor xml:id="__file_validator_test_8java_source_1l00011"/>00011 <emphasis role="keyword">import</emphasis>&#32;com.itextpdf.text.pdf.PdfWriter;
<anchor xml:id="__file_validator_test_8java_source_1l00012"/>00012 
<anchor xml:id="__file_validator_test_8java_source_1l00013"/>00013 <emphasis role="keyword">import</emphasis>&#32;java.io.ByteArrayOutputStream;
<anchor xml:id="__file_validator_test_8java_source_1l00014"/>00014 <emphasis role="keyword">import</emphasis>&#32;java.io.IOException;
<anchor xml:id="__file_validator_test_8java_source_1l00015"/>00015 <emphasis role="keyword">import</emphasis>&#32;java.io.InputStream;
<anchor xml:id="__file_validator_test_8java_source_1l00016"/>00016 <emphasis role="keyword">import</emphasis>&#32;java.math.BigInteger;
<anchor xml:id="__file_validator_test_8java_source_1l00017"/>00017 <emphasis role="keyword">import</emphasis>&#32;java.nio.file.Files;
<anchor xml:id="__file_validator_test_8java_source_1l00018"/>00018 <emphasis role="keyword">import</emphasis>&#32;java.nio.file.Path;
<anchor xml:id="__file_validator_test_8java_source_1l00019"/>00019 <emphasis role="keyword">import</emphasis>&#32;java.security.MessageDigest;
<anchor xml:id="__file_validator_test_8java_source_1l00020"/>00020 <emphasis role="keyword">import</emphasis>&#32;java.util.UUID;
<anchor xml:id="__file_validator_test_8java_source_1l00021"/>00021 <emphasis role="keyword">import</emphasis>&#32;java.util.logging.LogManager;
<anchor xml:id="__file_validator_test_8java_source_1l00022"/>00022 
<anchor xml:id="__file_validator_test_8java_source_1l00023"/>00023 <emphasis role="keyword">import</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;org.junit.jupiter.api.Assertions.assertEquals;
<anchor xml:id="__file_validator_test_8java_source_1l00024"/>00024 <emphasis role="keyword">import</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;org.junit.jupiter.api.Assertions.assertFalse;
<anchor xml:id="__file_validator_test_8java_source_1l00025"/>00025 <emphasis role="keyword">import</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;org.junit.jupiter.api.Assertions.assertThrows;
<anchor xml:id="__file_validator_test_8java_source_1l00026"/>00026 <emphasis role="keyword">import</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;org.junit.jupiter.api.Assertions.assertTrue;
<anchor xml:id="__file_validator_test_8java_source_1l00027"/>00027 <emphasis role="keyword">import</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;org.junit.jupiter.api.Assertions.assertDoesNotThrow;
<anchor xml:id="__file_validator_test_8java_source_1l00028"/>00028 
<anchor xml:id="__file_validator_test_8java_source_1l00033"/><link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_test">00033</link> <emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_test">FileValidatorTest</link>&#32;{
<anchor xml:id="__file_validator_test_8java_source_1l00034"/>00034 &#32;&#32;&#32;&#32;
<anchor xml:id="__file_validator_test_8java_source_1l00035"/>00035 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;Path&#32;tempDirectory;
<anchor xml:id="__file_validator_test_8java_source_1l00036"/>00036 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator">FileValidator</link>&#32;validator;
<anchor xml:id="__file_validator_test_8java_source_1l00037"/>00037 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">final</emphasis>&#32;String&#32;testUsername&#32;=&#32;System.getProperty(<emphasis role="stringliteral">&quot;user.name&quot;</emphasis>);
<anchor xml:id="__file_validator_test_8java_source_1l00038"/>00038 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">final</emphasis>&#32;String&#32;testCliPathPlugin&#32;=&#32;<emphasis role="stringliteral">&quot;java&#32;-jar&#32;plugins/java_echo.jar&#32;Success:&#32;${filePath}.new.pdf&quot;</emphasis>;
<anchor xml:id="__file_validator_test_8java_source_1l00039"/>00039 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">final</emphasis>&#32;String&#32;testCliContentPlugin&#32;=&#32;<emphasis role="stringliteral">&quot;java&#32;-jar&#32;plugins/java_echo.jar&#32;Success:&#32;MTIzNDU2IA0K&#32;suffix&quot;</emphasis>;
<anchor xml:id="__file_validator_test_8java_source_1l00040"/>00040 
<anchor xml:id="__file_validator_test_8java_source_1l00041"/>00041 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Config&#32;JSON&#32;object&#32;for&#32;testing</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00042"/>00042 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">final</emphasis>&#32;JSONObject&#32;CONFIG_JSON&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;JSONObject(<emphasis role="stringliteral">&quot;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00043"/>00043 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;\&quot;Validations\&quot;:&#32;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00044"/>00044 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;\&quot;Documents\&quot;:&#32;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00045"/>00045 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;\&quot;pdf\&quot;:&#32;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00046"/>00046 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;mime_type\&quot;:&#32;\&quot;application/pdf\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00047"/>00047 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;magic_bytes\&quot;:&#32;\&quot;25504446\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00048"/>00048 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;header_signatures\&quot;:&#32;\&quot;25504446\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00049"/>00049 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;footer_signatures\&quot;:&#32;\&quot;2525454f46\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00050"/>00050 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;antivirus_scan\&quot;:&#32;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00051"/>00051 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;clamav_scan.java\&quot;:&#32;[\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00052"/>00052 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;RETURN_TYPE\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00053"/>00053 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;param1\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00054"/>00054 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;param2\&quot;\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00055"/>00055 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;]},\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00056"/>00056 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;change_ownership\&quot;:&#32;true,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00057"/>00057 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;change_ownership_user\&quot;:&#32;\&quot;&quot;</emphasis>&#32;+&#32;testUsername&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00058"/>00058 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;change_ownership_mode\&quot;:&#32;\&quot;r\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00059"/>00059 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;name_encoding\&quot;:&#32;true,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00060"/>00060 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;max_size\&quot;:&#32;\&quot;4000\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00061"/>00061 &#32;&#32;&#32;&#32;+<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;extension_plugins\&quot;:&#32;[\&quot;clean_pdf_documents1.step1\&quot;,&#32;\&quot;clean_pdf_documents2.step1\&quot;,&#32;\&quot;clean_pdf_documents3.step1\&quot;]\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00062"/>00062 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;},\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00063"/>00063 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;\&quot;doc\&quot;:&#32;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00064"/>00064 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;mime_type\&quot;:&#32;\&quot;application/msword\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00065"/>00065 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;magic_bytes\&quot;:&#32;\&quot;D0CF11E0A1B11AE1\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00066"/>00066 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;header_signatures\&quot;:&#32;\&quot;D0CF11E0A1B11AE1\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00067"/>00067 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;footer_signatures\&quot;:&#32;\&quot;0000000000000000\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00068"/>00068 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;antivirus_scan\&quot;:&#32;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00069"/>00069 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;clamav_scan.java\&quot;:&#32;[\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00070"/>00070 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;RETURN_TYPE\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00071"/>00071 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;param1\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00072"/>00072 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;param2\&quot;\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00073"/>00073 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;]},\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00074"/>00074 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;change_ownership\&quot;:&#32;true,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00075"/>00075 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;change_ownership_user\&quot;:&#32;\&quot;User1\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00076"/>00076 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;change_ownership_mode\&quot;:&#32;\&quot;r\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00077"/>00077 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;name_encoding\&quot;:&#32;true,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00078"/>00078 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;max_size\&quot;:&#32;\&quot;4000\&quot;\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00079"/>00079 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;}\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00080"/>00080 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;}\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00081"/>00081 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;},\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00082"/>00082 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;\&quot;Plugins\&quot;:&#32;\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00083"/>00083 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;{\&quot;clean_pdf_documents1\&quot;:{\&quot;step1.step\&quot;:{\&quot;type\&quot;:\&quot;cli\&quot;,\&quot;run_before\&quot;:true,&#32;\&quot;endpoint\&quot;:\&quot;&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00084"/>00084 &#32;&#32;&#32;&#32;+&#32;testCliPathPlugin
<anchor xml:id="__file_validator_test_8java_source_1l00085"/>00085 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;,\&quot;timeout\&quot;:320,\&quot;on_timeout_or_fail\&quot;:\&quot;pass\&quot;,\&quot;response\&quot;:\&quot;Success:&#32;${step1.filePath}\&quot;}}&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00086"/>00086 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;,\&quot;clean_pdf_documents2\&quot;:{\&quot;step1.step\&quot;:{\&quot;type\&quot;:\&quot;cli\&quot;,\&quot;run_after\&quot;:true,&#32;\&quot;endpoint\&quot;:\&quot;&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00087"/>00087 &#32;&#32;&#32;&#32;+&#32;testCliContentPlugin
<anchor xml:id="__file_validator_test_8java_source_1l00088"/>00088 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;,\&quot;timeout\&quot;:320,\&quot;on_timeout_or_fail\&quot;:\&quot;fail\&quot;,\&quot;response\&quot;:\&quot;Success:&#32;${step1.fileContent}&#32;suffix\&quot;}}&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00089"/>00089 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;,\&quot;clean_pdf_documents3\&quot;:{\&quot;step1.step\&quot;:{\&quot;type\&quot;:\&quot;cli\&quot;,\&quot;run_after\&quot;:true,&#32;\&quot;endpoint\&quot;:\&quot;&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00090"/>00090 &#32;&#32;&#32;&#32;+&#32;testCliContentPlugin
<anchor xml:id="__file_validator_test_8java_source_1l00091"/>00091 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;,\&quot;timeout\&quot;:320,\&quot;on_timeout_or_fail\&quot;:\&quot;fail\&quot;,\&quot;response\&quot;:\&quot;\&quot;}}&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00092"/>00092 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;}}\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00093"/>00093 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;}&quot;</emphasis>);
<anchor xml:id="__file_validator_test_8java_source_1l00094"/>00094 &#32;&#32;&#32;&#32;
<anchor xml:id="__file_validator_test_8java_source_1l00095"/>00095 
<anchor xml:id="__file_validator_test_8java_source_1l00096"/>00096 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Setup&#32;temp&#32;directory&#32;and&#32;FileValidator&#32;instance</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00097"/>00097 &#32;&#32;&#32;&#32;@BeforeEach
<anchor xml:id="__file_validator_test_8java_source_1l00098"/><link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_test_1a1417d7ec8baf0e43f92bfbccf87b631b">00098</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_test_1a1417d7ec8baf0e43f92bfbccf87b631b">setUp</link>()&#32;throws&#32;IOException&#32;{
<anchor xml:id="__file_validator_test_8java_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tempDirectory&#32;=&#32;Files.createTempDirectory(<emphasis role="stringliteral">&quot;temp&quot;</emphasis>);
<anchor xml:id="__file_validator_test_8java_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;validator&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator">FileValidator</link>(CONFIG_JSON);
<anchor xml:id="__file_validator_test_8java_source_1l00101"/>00101 &#32;&#32;&#32;&#32;}
<anchor xml:id="__file_validator_test_8java_source_1l00102"/>00102 
<anchor xml:id="__file_validator_test_8java_source_1l00103"/>00103 &#32;&#32;&#32;&#32;@Test
<anchor xml:id="__file_validator_test_8java_source_1l00104"/><link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_test_1a8f6ee89e4b8c949540cbb9379d460ae7">00104</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_test_1a8f6ee89e4b8c949540cbb9379d460ae7">testDefaultLoggingConfiguration</link>()&#32;{
<anchor xml:id="__file_validator_test_8java_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertDoesNotThrow(()&#32;-&gt;&#32;{
<anchor xml:id="__file_validator_test_8java_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Object&#32;o&#32;=&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator">FileValidator</link>.class.getResourceAsStream(<emphasis role="stringliteral">&quot;/logging.properties&quot;</emphasis>);
<anchor xml:id="__file_validator_test_8java_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LogManager.getLogManager().readConfiguration((InputStream)&#32;o);
<anchor xml:id="__file_validator_test_8java_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},&#32;<emphasis role="stringliteral">&quot;Failed&#32;to&#32;load&#32;default&#32;logging&#32;configuration&quot;</emphasis>);
<anchor xml:id="__file_validator_test_8java_source_1l00109"/>00109 &#32;&#32;&#32;&#32;}
<anchor xml:id="__file_validator_test_8java_source_1l00110"/>00110 
<anchor xml:id="__file_validator_test_8java_source_1l00111"/>00111 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Test&#32;empty&#32;json&#32;config&#32;object</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00112"/>00112 &#32;&#32;&#32;&#32;@Test
<anchor xml:id="__file_validator_test_8java_source_1l00113"/><link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_test_1ac5e6be723a61ae3f63b045e48da96407">00113</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_test_1ac5e6be723a61ae3f63b045e48da96407">testEmptyConfigJsonObject</link>()&#32;{
<anchor xml:id="__file_validator_test_8java_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;JSONObject&#32;jsonObject&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;JSONObject();
<anchor xml:id="__file_validator_test_8java_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Throwable&#32;exception&#32;=&#32;assertThrows(IllegalArgumentException.class,&#32;()&#32;-&gt;&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator">FileValidator</link>(jsonObject));
<anchor xml:id="__file_validator_test_8java_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertEquals(<emphasis role="stringliteral">&quot;Config&#32;JSON&#32;object&#32;cannot&#32;be&#32;null&#32;or&#32;empty,&#32;and&#32;must&#32;have&#32;Validations&#32;section.&quot;</emphasis>,&#32;exception.getMessage());
<anchor xml:id="__file_validator_test_8java_source_1l00117"/>00117 &#32;&#32;&#32;&#32;}
<anchor xml:id="__file_validator_test_8java_source_1l00118"/>00118 
<anchor xml:id="__file_validator_test_8java_source_1l00119"/>00119 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Test&#32;null&#32;json&#32;config&#32;object</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00120"/>00120 &#32;&#32;&#32;&#32;@Test
<anchor xml:id="__file_validator_test_8java_source_1l00121"/><link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_test_1a1213ad6f72534fd47c2023069815a512">00121</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_test_1a1213ad6f72534fd47c2023069815a512">testNullConfigJsonObject</link>()&#32;{
<anchor xml:id="__file_validator_test_8java_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;JSONObject&#32;jsonObject&#32;=&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__file_validator_test_8java_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Throwable&#32;exception&#32;=&#32;assertThrows(IllegalArgumentException.class,&#32;()&#32;-&gt;&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator">FileValidator</link>(jsonObject));
<anchor xml:id="__file_validator_test_8java_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertEquals(<emphasis role="stringliteral">&quot;Config&#32;JSON&#32;object&#32;cannot&#32;be&#32;null&#32;or&#32;empty,&#32;and&#32;must&#32;have&#32;Validations&#32;section.&quot;</emphasis>,&#32;exception.getMessage());
<anchor xml:id="__file_validator_test_8java_source_1l00125"/>00125 &#32;&#32;&#32;&#32;}
<anchor xml:id="__file_validator_test_8java_source_1l00126"/>00126 
<anchor xml:id="__file_validator_test_8java_source_1l00127"/>00127 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Test&#32;empty&#32;fileCategory</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00128"/>00128 &#32;&#32;&#32;&#32;@Test
<anchor xml:id="__file_validator_test_8java_source_1l00129"/><link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_test_1aafe4b22d7bf43eda1d880ca10df66899">00129</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_test_1aafe4b22d7bf43eda1d880ca10df66899">testBlankFileCategory</link>()&#32;throws&#32;Exception&#32;{
<anchor xml:id="__file_validator_test_8java_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;fileInBytes&#32;=&#32;<emphasis role="stringliteral">&quot;1234&quot;</emphasis>.getBytes();
<anchor xml:id="__file_validator_test_8java_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;String&#32;fileName&#32;=&#32;<emphasis role="stringliteral">&quot;test.pdf&quot;</emphasis>;
<anchor xml:id="__file_validator_test_8java_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Throwable&#32;exception&#32;=&#32;assertThrows(IllegalArgumentException.class,&#32;()&#32;-&gt;
<anchor xml:id="__file_validator_test_8java_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;validator.<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_1a0c42ecd30b213d35bf114d84e7b40f9f">validateFile</link>(<emphasis role="stringliteral">&quot;&quot;</emphasis>,&#32;fileInBytes,&#32;fileName,&#32;tempDirectory.toString()));
<anchor xml:id="__file_validator_test_8java_source_1l00134"/>00134 &#32;&#32;&#32;&#32;assertEquals(<emphasis role="stringliteral">&quot;fileCategory&#32;cannot&#32;be&#32;null&#32;or&#32;empty.&quot;</emphasis>,&#32;exception.getMessage());
<anchor xml:id="__file_validator_test_8java_source_1l00135"/>00135 &#32;&#32;&#32;&#32;}
<anchor xml:id="__file_validator_test_8java_source_1l00136"/>00136 &#32;&#32;&#32;&#32;
<anchor xml:id="__file_validator_test_8java_source_1l00137"/>00137 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Test&#32;empty&#32;fileName</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00138"/>00138 &#32;&#32;&#32;&#32;@Test
<anchor xml:id="__file_validator_test_8java_source_1l00139"/><link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_test_1a8d2cce9b057a5170bdbf37eafcb7fb41">00139</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_test_1a8d2cce9b057a5170bdbf37eafcb7fb41">testBlankFileName</link>()&#32;throws&#32;Exception&#32;{
<anchor xml:id="__file_validator_test_8java_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;fileInBytes&#32;=&#32;<emphasis role="stringliteral">&quot;1234&quot;</emphasis>.getBytes();
<anchor xml:id="__file_validator_test_8java_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;String&#32;fileName&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="__file_validator_test_8java_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Throwable&#32;exception&#32;=&#32;assertThrows(IllegalArgumentException.class,&#32;()&#32;-&gt;&#32;{
<anchor xml:id="__file_validator_test_8java_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;validator.validateFile(<emphasis role="stringliteral">&quot;Documents&quot;</emphasis>,&#32;fileInBytes,&#32;fileName,&#32;tempDirectory.toString());&#32;});
<anchor xml:id="__file_validator_test_8java_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertEquals(<emphasis role="stringliteral">&quot;fileName&#32;cannot&#32;be&#32;null&#32;or&#32;empty.&quot;</emphasis>,&#32;exception.getMessage());
<anchor xml:id="__file_validator_test_8java_source_1l00145"/>00145 &#32;&#32;&#32;&#32;}
<anchor xml:id="__file_validator_test_8java_source_1l00146"/>00146 &#32;&#32;&#32;&#32;
<anchor xml:id="__file_validator_test_8java_source_1l00147"/>00147 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Test&#32;originalFile&#32;Bytes&#32;is&#32;null</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00148"/>00148 &#32;&#32;&#32;&#32;@Test
<anchor xml:id="__file_validator_test_8java_source_1l00149"/><link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_test_1a8618f15932dcd90e9f86e79d42d8475f">00149</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_test_1a8618f15932dcd90e9f86e79d42d8475f">testNullOriginalFile</link>()&#32;throws&#32;Exception&#32;{
<anchor xml:id="__file_validator_test_8java_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;fileInBytes&#32;=&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__file_validator_test_8java_source_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;String&#32;fileName&#32;=&#32;<emphasis role="stringliteral">&quot;test.pdf&quot;</emphasis>;
<anchor xml:id="__file_validator_test_8java_source_1l00152"/>00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Throwable&#32;exception&#32;=&#32;assertThrows(IllegalArgumentException.class,&#32;()&#32;-&gt;&#32;{
<anchor xml:id="__file_validator_test_8java_source_1l00153"/>00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;validator.validateFile(<emphasis role="stringliteral">&quot;Documents&quot;</emphasis>,&#32;fileInBytes,&#32;fileName,&#32;tempDirectory.toString());&#32;});
<anchor xml:id="__file_validator_test_8java_source_1l00154"/>00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertEquals(<emphasis role="stringliteral">&quot;originalFile&#32;cannot&#32;be&#32;null&#32;or&#32;empty.&quot;</emphasis>,&#32;exception.getMessage());
<anchor xml:id="__file_validator_test_8java_source_1l00155"/>00155 &#32;&#32;&#32;&#32;}
<anchor xml:id="__file_validator_test_8java_source_1l00156"/>00156 
<anchor xml:id="__file_validator_test_8java_source_1l00157"/>00157 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Test&#32;originalFile&#32;Bytes&#32;is&#32;empty</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00158"/>00158 &#32;&#32;&#32;&#32;@Test
<anchor xml:id="__file_validator_test_8java_source_1l00159"/><link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_test_1a272e17e0dce67f9f10adf4798e80be7d">00159</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_test_1a272e17e0dce67f9f10adf4798e80be7d">testEmptyOriginalFile</link>()&#32;throws&#32;Exception&#32;{
<anchor xml:id="__file_validator_test_8java_source_1l00160"/>00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;fileInBytes&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">byte</emphasis>[]{};
<anchor xml:id="__file_validator_test_8java_source_1l00161"/>00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;String&#32;fileName&#32;=&#32;<emphasis role="stringliteral">&quot;test.pdf&quot;</emphasis>;
<anchor xml:id="__file_validator_test_8java_source_1l00162"/>00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Throwable&#32;exception&#32;=&#32;assertThrows(IllegalArgumentException.class,&#32;()&#32;-&gt;&#32;{
<anchor xml:id="__file_validator_test_8java_source_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;validator.validateFile(<emphasis role="stringliteral">&quot;Documents&quot;</emphasis>,&#32;fileInBytes,&#32;fileName,&#32;tempDirectory.toString());&#32;});
<anchor xml:id="__file_validator_test_8java_source_1l00164"/>00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertEquals(<emphasis role="stringliteral">&quot;originalFile&#32;cannot&#32;be&#32;null&#32;or&#32;empty.&quot;</emphasis>,&#32;exception.getMessage());
<anchor xml:id="__file_validator_test_8java_source_1l00165"/>00165 &#32;&#32;&#32;&#32;}
<anchor xml:id="__file_validator_test_8java_source_1l00166"/>00166 
<anchor xml:id="__file_validator_test_8java_source_1l00167"/>00167 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Test&#32;none&#32;existing&#32;fileCategory&#32;&apos;0934jt0-349rtj3409rj3409rj&apos;</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00168"/>00168 &#32;&#32;&#32;&#32;@Test
<anchor xml:id="__file_validator_test_8java_source_1l00169"/><link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_test_1a1c50dc29d1e022d54ef08c57e4809d22">00169</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_test_1a1c50dc29d1e022d54ef08c57e4809d22">testFileCategoryNotConfigured</link>()&#32;throws&#32;Exception&#32;{
<anchor xml:id="__file_validator_test_8java_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;fileInBytes&#32;=&#32;<emphasis role="stringliteral">&quot;1234&quot;</emphasis>.getBytes();
<anchor xml:id="__file_validator_test_8java_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;String&#32;fileName&#32;=&#32;<emphasis role="stringliteral">&quot;test.pdf&quot;</emphasis>;
<anchor xml:id="__file_validator_test_8java_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_validation_response">ValidationResponse</link>&#32;fileValidationResults&#32;=&#32;validator.<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_1a0c42ecd30b213d35bf114d84e7b40f9f">validateFile</link>(<emphasis role="stringliteral">&quot;0934jt0-349rtj3409rj3409rj&quot;</emphasis>,&#32;fileInBytes,&#32;fileName,&#32;tempDirectory.toString());
<anchor xml:id="__file_validator_test_8java_source_1l00173"/>00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertFalse(fileValidationResults.isValid(),&#32;<emphasis role="stringliteral">&quot;Expected&#32;validation&#32;response&#32;to&#32;be&#32;invalid&#32;with&#32;non&#32;existing&#32;fileCategory&quot;</emphasis>);
<anchor xml:id="__file_validator_test_8java_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertTrue(fileValidationResults.resultsInfo().contains(<emphasis role="stringliteral">&quot;Error&#32;creating&#32;Extension&#32;configurations&#32;object&quot;</emphasis>),&#32;<emphasis role="stringliteral">&quot;Expected&#32;&apos;Error&#32;creating&#32;Extension&#32;configurations&#32;object&apos;,&#32;got:&#32;&quot;</emphasis>&#32;+&#32;fileValidationResults.resultsInfo());
<anchor xml:id="__file_validator_test_8java_source_1l00175"/>00175 &#32;&#32;&#32;&#32;}
<anchor xml:id="__file_validator_test_8java_source_1l00176"/>00176 
<anchor xml:id="__file_validator_test_8java_source_1l00177"/>00177 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Test&#32;file&#32;extension&#32;that&#32;is&#32;not&#32;configured&#32;in&#32;config&#32;json</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00178"/>00178 &#32;&#32;&#32;&#32;@Test
<anchor xml:id="__file_validator_test_8java_source_1l00179"/><link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_test_1a040aea36c591131fb63e1966fd4f9594">00179</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_test_1a040aea36c591131fb63e1966fd4f9594">testInvalidExtension</link>()&#32;throws&#32;Exception&#32;{
<anchor xml:id="__file_validator_test_8java_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;fileInBytes&#32;=&#32;<emphasis role="stringliteral">&quot;1234&quot;</emphasis>.getBytes();
<anchor xml:id="__file_validator_test_8java_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;String&#32;fileName&#32;=&#32;<emphasis role="stringliteral">&quot;test.txt&quot;</emphasis>;
<anchor xml:id="__file_validator_test_8java_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_validation_response">ValidationResponse</link>&#32;fileValidationResults&#32;=&#32;validator.<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_1a0c42ecd30b213d35bf114d84e7b40f9f">validateFile</link>(<emphasis role="stringliteral">&quot;Documents&quot;</emphasis>,&#32;fileInBytes,&#32;fileName,&#32;tempDirectory.toString());
<anchor xml:id="__file_validator_test_8java_source_1l00183"/>00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertFalse(fileValidationResults.isValid(),&#32;<emphasis role="stringliteral">&quot;Expected&#32;validation&#32;response&#32;to&#32;be&#32;invalid&#32;with&#32;.txt&#32;extension&quot;</emphasis>);
<anchor xml:id="__file_validator_test_8java_source_1l00184"/>00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertTrue(fileValidationResults.resultsInfo().contains(<emphasis role="stringliteral">&quot;Error&#32;creating&#32;Extension&#32;configurations&#32;object&quot;</emphasis>));
<anchor xml:id="__file_validator_test_8java_source_1l00185"/>00185 &#32;&#32;&#32;&#32;}
<anchor xml:id="__file_validator_test_8java_source_1l00186"/>00186 
<anchor xml:id="__file_validator_test_8java_source_1l00187"/>00187 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Test&#32;file&#32;size&#32;that&#32;is&#32;greater&#32;than&#32;the&#32;max&#32;size&#32;configured&#32;in&#32;config&#32;json</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00188"/>00188 &#32;&#32;&#32;&#32;@Test
<anchor xml:id="__file_validator_test_8java_source_1l00189"/><link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_test_1a154c22f0a5a6b796f196a8ab6c487212">00189</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_test_1a154c22f0a5a6b796f196a8ab6c487212">testFileTooLarge</link>()&#32;throws&#32;Exception&#32;{
<anchor xml:id="__file_validator_test_8java_source_1l00190"/>00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;fileInBytes&#32;=&#32;generatePdfBytes(5000000);
<anchor xml:id="__file_validator_test_8java_source_1l00191"/>00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;String&#32;fileName&#32;=&#32;<emphasis role="stringliteral">&quot;largeFile.pdf&quot;</emphasis>;
<anchor xml:id="__file_validator_test_8java_source_1l00192"/>00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_validation_response">ValidationResponse</link>&#32;fileValidationResults&#32;=&#32;validator.<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_1a0c42ecd30b213d35bf114d84e7b40f9f">validateFile</link>(<emphasis role="stringliteral">&quot;Documents&quot;</emphasis>,&#32;fileInBytes,&#32;fileName,&#32;tempDirectory.toString());
<anchor xml:id="__file_validator_test_8java_source_1l00193"/>00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertFalse(fileValidationResults.isValid(),&#32;<emphasis role="stringliteral">&quot;Expected&#32;validation&#32;response&#32;to&#32;be&#32;invalid&#32;for&#32;file&#32;size:&quot;</emphasis>&#32;+&#32;fileInBytes.length);
<anchor xml:id="__file_validator_test_8java_source_1l00194"/>00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertTrue(fileValidationResults.resultsInfo().contains(<emphasis role="stringliteral">&quot;exceeds&#32;maximum&#32;allowed&#32;size&quot;</emphasis>));
<anchor xml:id="__file_validator_test_8java_source_1l00195"/>00195 &#32;&#32;&#32;&#32;}
<anchor xml:id="__file_validator_test_8java_source_1l00196"/>00196 
<anchor xml:id="__file_validator_test_8java_source_1l00197"/>00197 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Test&#32;valid&#32;inputs&#32;including&#32;valid&#32;pdf&#32;file&#32;with&#32;storage</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00198"/>00198 &#32;&#32;&#32;&#32;@Test
<anchor xml:id="__file_validator_test_8java_source_1l00199"/><link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_test_1a45f6f37d4e60ebc840cfff30a44dce6d">00199</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_test_1a45f6f37d4e60ebc840cfff30a44dce6d">testValidInputsStore</link>()&#32;throws&#32;Exception&#32;{
<anchor xml:id="__file_validator_test_8java_source_1l00200"/>00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;fileInBytes&#32;=&#32;generatePdfBytes(250000);
<anchor xml:id="__file_validator_test_8java_source_1l00201"/>00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;String&#32;fileName&#32;=&#32;<emphasis role="stringliteral">&quot;test.pdf&quot;</emphasis>;
<anchor xml:id="__file_validator_test_8java_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_validation_response">ValidationResponse</link>&#32;fileValidationResults&#32;=&#32;validator.<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_1a0c42ecd30b213d35bf114d84e7b40f9f">validateFile</link>(<emphasis role="stringliteral">&quot;Documents&quot;</emphasis>,&#32;fileInBytes,&#32;fileName,&#32;tempDirectory.toString());
<anchor xml:id="__file_validator_test_8java_source_1l00203"/>00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertTrue(fileValidationResults.isValid(),&#32;<emphasis role="stringliteral">&quot;Expected&#32;validation&#32;response&#32;to&#32;be&#32;valid&quot;</emphasis>);
<anchor xml:id="__file_validator_test_8java_source_1l00204"/>00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertEquals(calculateChecksum(fileInBytes),&#32;fileValidationResults.<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_validation_response_1afa36e6b68270728848136cb7c62c3103">getFileChecksum</link>(),&#32;<emphasis role="stringliteral">&quot;Expected&#32;checksums&#32;to&#32;match&quot;</emphasis>);
<anchor xml:id="__file_validator_test_8java_source_1l00205"/>00205 &#32;&#32;&#32;&#32;}
<anchor xml:id="__file_validator_test_8java_source_1l00206"/>00206 
<anchor xml:id="__file_validator_test_8java_source_1l00207"/>00207 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Test&#32;valid&#32;inputs&#32;including&#32;valid&#32;pdf&#32;file&#32;without&#32;storage</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00208"/>00208 &#32;&#32;&#32;&#32;@Test
<anchor xml:id="__file_validator_test_8java_source_1l00209"/><link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_test_1aaaae265bcd6240cb03b672a0b185d984">00209</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_test_1aaaae265bcd6240cb03b672a0b185d984">testValidInputs</link>()&#32;throws&#32;Exception&#32;{
<anchor xml:id="__file_validator_test_8java_source_1l00210"/>00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;fileInBytes&#32;=&#32;generatePdfBytes(250000);
<anchor xml:id="__file_validator_test_8java_source_1l00211"/>00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;String&#32;fileName&#32;=&#32;<emphasis role="stringliteral">&quot;test.pdf&quot;</emphasis>;
<anchor xml:id="__file_validator_test_8java_source_1l00212"/>00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_validation_response">ValidationResponse</link>&#32;fileValidationResults&#32;=&#32;validator.<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_1a0c42ecd30b213d35bf114d84e7b40f9f">validateFile</link>(<emphasis role="stringliteral">&quot;Documents&quot;</emphasis>,&#32;fileInBytes,&#32;fileName);
<anchor xml:id="__file_validator_test_8java_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertTrue(fileValidationResults.isValid(),&#32;<emphasis role="stringliteral">&quot;Expected&#32;validation&#32;response&#32;to&#32;be&#32;valid&quot;</emphasis>);
<anchor xml:id="__file_validator_test_8java_source_1l00214"/>00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertEquals(calculateChecksum(fileInBytes),&#32;fileValidationResults.<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_validation_response_1afa36e6b68270728848136cb7c62c3103">getFileChecksum</link>(),&#32;<emphasis role="stringliteral">&quot;Expected&#32;checksums&#32;to&#32;match&quot;</emphasis>);
<anchor xml:id="__file_validator_test_8java_source_1l00215"/>00215 &#32;&#32;&#32;&#32;}
<anchor xml:id="__file_validator_test_8java_source_1l00216"/>00216 &#32;&#32;&#32;&#32;
<anchor xml:id="__file_validator_test_8java_source_1l00217"/>00217 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Test&#32;file&#32;with&#32;content&#32;mismatching&#32;its&#32;extension&#32;inclufing&#32;magic&#32;bytes,&#32;header&#32;and&#32;footer,&#32;validations</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00218"/>00218 &#32;&#32;&#32;&#32;@Test
<anchor xml:id="__file_validator_test_8java_source_1l00219"/><link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_test_1a6e9b25c615380aec9611a063c7614c56">00219</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_test_1a6e9b25c615380aec9611a063c7614c56">testContenMismatch</link>()&#32;throws&#32;Exception&#32;{
<anchor xml:id="__file_validator_test_8java_source_1l00220"/>00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;fileInBytes&#32;=&#32;<emphasis role="stringliteral">&quot;This&#32;is&#32;not&#32;a&#32;pdf&#32;file&quot;</emphasis>.getBytes();
<anchor xml:id="__file_validator_test_8java_source_1l00221"/>00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;String&#32;fileName&#32;=&#32;<emphasis role="stringliteral">&quot;notReal.pdf&quot;</emphasis>;
<anchor xml:id="__file_validator_test_8java_source_1l00222"/>00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_validation_response">ValidationResponse</link>&#32;fileValidationResults&#32;=&#32;validator.<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_1a0c42ecd30b213d35bf114d84e7b40f9f">validateFile</link>(<emphasis role="stringliteral">&quot;Documents&quot;</emphasis>,&#32;fileInBytes,&#32;fileName,&#32;tempDirectory.toString());
<anchor xml:id="__file_validator_test_8java_source_1l00223"/>00223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertFalse(fileValidationResults.isValid(),&#32;<emphasis role="stringliteral">&quot;Expected&#32;validation&#32;response&#32;to&#32;be&#32;invalid&#32;when&#32;content&#32;does&#32;not&#32;match&#32;extension&quot;</emphasis>);
<anchor xml:id="__file_validator_test_8java_source_1l00224"/>00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertTrue(fileValidationResults.resultsInfo().contains(<emphasis role="stringliteral">&quot;Invalid&#32;magic_bytes&#32;for&#32;file&#32;extension:&quot;</emphasis>),&#32;<emphasis role="stringliteral">&quot;Expected&#32;&apos;Invalid&#32;magic_bytes&apos;,&#32;got:&#32;&quot;</emphasis>&#32;+&#32;fileValidationResults.resultsInfo());
<anchor xml:id="__file_validator_test_8java_source_1l00225"/>00225 &#32;&#32;&#32;&#32;}
<anchor xml:id="__file_validator_test_8java_source_1l00226"/>00226 
<anchor xml:id="__file_validator_test_8java_source_1l00227"/>00227 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Test&#32;saving&#32;to&#32;non&#32;existing&#32;directory</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00228"/>00228 &#32;&#32;&#32;&#32;@Test
<anchor xml:id="__file_validator_test_8java_source_1l00229"/><link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_test_1aec7f73f24f206cc5b94c6b208c4b0cdd">00229</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_test_1aec7f73f24f206cc5b94c6b208c4b0cdd">testSaveToNonExistingDirectory</link>()&#32;throws&#32;Exception&#32;{
<anchor xml:id="__file_validator_test_8java_source_1l00230"/>00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;fileInBytes&#32;=&#32;generatePdfBytes(250000);
<anchor xml:id="__file_validator_test_8java_source_1l00231"/>00231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;String&#32;fileName&#32;=&#32;<emphasis role="stringliteral">&quot;test.pdf&quot;</emphasis>;
<anchor xml:id="__file_validator_test_8java_source_1l00232"/>00232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_validation_response">ValidationResponse</link>&#32;fileValidationResults&#32;=&#32;validator.<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_1a0c42ecd30b213d35bf114d84e7b40f9f">validateFile</link>(<emphasis role="stringliteral">&quot;Documents&quot;</emphasis>,&#32;fileInBytes,&#32;fileName,&#32;<emphasis role="stringliteral">&quot;nonExistingDirectory-9384rhj934f8h3498h/3hd923d8h&quot;</emphasis>);
<anchor xml:id="__file_validator_test_8java_source_1l00233"/>00233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertTrue(fileValidationResults.isValid(),&#32;<emphasis role="stringliteral">&quot;Expected&#32;validation&#32;response&#32;to&#32;be&#32;valid&#32;when&#32;saving&#32;to&#32;non&#32;existing&#32;directory&quot;</emphasis>);
<anchor xml:id="__file_validator_test_8java_source_1l00234"/>00234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertTrue(fileValidationResults.resultsInfo().contains(<emphasis role="stringliteral">&quot;File&#32;is&#32;valid&#32;but&#32;failed&#32;to&#32;save&#32;to&#32;output&#32;directory:&quot;</emphasis>),&#32;<emphasis role="stringliteral">&quot;Expected&#32;&apos;File&#32;is&#32;valid&#32;but&#32;failed&#32;to&#32;save&#32;to&#32;output&#32;directory:&apos;,&#32;got:&#32;&quot;</emphasis>&#32;+&#32;fileValidationResults.resultsInfo());
<anchor xml:id="__file_validator_test_8java_source_1l00235"/>00235 &#32;&#32;&#32;&#32;}
<anchor xml:id="__file_validator_test_8java_source_1l00236"/>00236 
<anchor xml:id="__file_validator_test_8java_source_1l00237"/>00237 
<anchor xml:id="__file_validator_test_8java_source_1l00238"/>00238 
<anchor xml:id="__file_validator_test_8java_source_1l00239"/>00239 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Helper&#32;methods</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00240"/>00240 
<anchor xml:id="__file_validator_test_8java_source_1l00241"/>00241 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Generate&#32;a&#32;pdf&#32;file&#32;with&#32;a&#32;given&#32;size&#32;in&#32;bytes</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00242"/>00242 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;generatePdfBytes(<emphasis role="keywordtype">int</emphasis>&#32;sizeInBytes)&#32;<emphasis role="keywordflow">throws</emphasis>&#32;Exception&#32;{
<anchor xml:id="__file_validator_test_8java_source_1l00243"/>00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sizeInBytes&#32;&lt;=&#32;0)&#32;{
<anchor xml:id="__file_validator_test_8java_source_1l00244"/>00244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;IllegalArgumentException(<emphasis role="stringliteral">&quot;Size&#32;in&#32;Bytes&#32;must&#32;be&#32;a&#32;positive&#32;value.&quot;</emphasis>);
<anchor xml:id="__file_validator_test_8java_source_1l00245"/>00245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__file_validator_test_8java_source_1l00246"/>00246 
<anchor xml:id="__file_validator_test_8java_source_1l00247"/>00247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ByteArrayOutputStream&#32;baos&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;ByteArrayOutputStream();
<anchor xml:id="__file_validator_test_8java_source_1l00248"/>00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Document&#32;document&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Document(PageSize.A4);
<anchor xml:id="__file_validator_test_8java_source_1l00249"/>00249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PdfWriter&#32;writer&#32;=&#32;PdfWriter.getInstance(document,&#32;baos);
<anchor xml:id="__file_validator_test_8java_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;writer.setFullCompression();
<anchor xml:id="__file_validator_test_8java_source_1l00251"/>00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;writer.setCompressionLevel(0);
<anchor xml:id="__file_validator_test_8java_source_1l00252"/>00252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;document.open();
<anchor xml:id="__file_validator_test_8java_source_1l00253"/>00253 &#32;&#32;&#32;&#32;
<anchor xml:id="__file_validator_test_8java_source_1l00254"/>00254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;String&#32;content&#32;=&#32;UUID.randomUUID().toString()&#32;+&#32;UUID.randomUUID().toString();
<anchor xml:id="__file_validator_test_8java_source_1l00255"/>00255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;contentLength&#32;=&#32;content.getBytes().length;
<anchor xml:id="__file_validator_test_8java_source_1l00256"/>00256 &#32;&#32;&#32;&#32;
<anchor xml:id="__file_validator_test_8java_source_1l00257"/>00257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(baos.size()&#32;&lt;&#32;sizeInBytes)&#32;{
<anchor xml:id="__file_validator_test_8java_source_1l00258"/>00258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;iterations&#32;=&#32;(sizeInBytes&#32;-&#32;baos.size())&#32;/&#32;contentLength;
<anchor xml:id="__file_validator_test_8java_source_1l00259"/>00259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;iterations;&#32;i++)&#32;{
<anchor xml:id="__file_validator_test_8java_source_1l00260"/>00260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;document.add(<emphasis role="keyword">new</emphasis>&#32;Paragraph(content));
<anchor xml:id="__file_validator_test_8java_source_1l00261"/>00261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__file_validator_test_8java_source_1l00262"/>00262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;writer.flush();
<anchor xml:id="__file_validator_test_8java_source_1l00263"/>00263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__file_validator_test_8java_source_1l00264"/>00264 &#32;&#32;&#32;&#32;
<anchor xml:id="__file_validator_test_8java_source_1l00265"/>00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;document.close();
<anchor xml:id="__file_validator_test_8java_source_1l00266"/>00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;writer.close();
<anchor xml:id="__file_validator_test_8java_source_1l00267"/>00267 &#32;&#32;&#32;&#32;
<anchor xml:id="__file_validator_test_8java_source_1l00268"/>00268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;baos.toByteArray();
<anchor xml:id="__file_validator_test_8java_source_1l00269"/>00269 &#32;&#32;&#32;&#32;}
<anchor xml:id="__file_validator_test_8java_source_1l00270"/>00270 
<anchor xml:id="__file_validator_test_8java_source_1l00271"/>00271 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculate&#32;file&#32;checksum</emphasis>
<anchor xml:id="__file_validator_test_8java_source_1l00272"/>00272 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;String&#32;calculateChecksum(<emphasis role="keywordtype">byte</emphasis>[]&#32;fileBytes)&#32;{
<anchor xml:id="__file_validator_test_8java_source_1l00273"/>00273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
<anchor xml:id="__file_validator_test_8java_source_1l00274"/>00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;hash&#32;=&#32;MessageDigest.getInstance(<emphasis role="stringliteral">&quot;SHA-256&quot;</emphasis>).digest(fileBytes);
<anchor xml:id="__file_validator_test_8java_source_1l00275"/>00275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;BigInteger(1,&#32;hash).toString(16);
<anchor xml:id="__file_validator_test_8java_source_1l00276"/>00276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(Exception&#32;e)&#32;{
<anchor xml:id="__file_validator_test_8java_source_1l00277"/>00277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;e.printStackTrace();
<anchor xml:id="__file_validator_test_8java_source_1l00278"/>00278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">null</emphasis>;
<anchor xml:id="__file_validator_test_8java_source_1l00279"/>00279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__file_validator_test_8java_source_1l00280"/>00280 &#32;&#32;&#32;&#32;}&#32;&#32;&#32;
<anchor xml:id="__file_validator_test_8java_source_1l00281"/>00281 
<anchor xml:id="__file_validator_test_8java_source_1l00282"/>00282 }
</programlisting></section>
