<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__file_validator_json_test_8java_source" xml:lang="en-US">
<title>FileValidatorJsonTest.java</title>
<indexterm><primary>C:/Users/User1/git/FileChampion4j/src/test/java/dev/filechampion/filechampion4j/FileValidatorJsonTest.java</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__file_validator_json_test_8java_source_1l00001"/>00001 <emphasis role="keyword">package&#32;</emphasis>dev.filechampion.filechampion4j;
<anchor xml:id="__file_validator_json_test_8java_source_1l00002"/>00002 
<anchor xml:id="__file_validator_json_test_8java_source_1l00003"/>00003 
<anchor xml:id="__file_validator_json_test_8java_source_1l00004"/>00004 <emphasis role="keyword">import</emphasis>&#32;org.json.JSONObject;
<anchor xml:id="__file_validator_json_test_8java_source_1l00005"/>00005 
<anchor xml:id="__file_validator_json_test_8java_source_1l00006"/>00006 <emphasis role="keyword">import</emphasis>&#32;org.junit.jupiter.api.Test;
<anchor xml:id="__file_validator_json_test_8java_source_1l00007"/>00007 
<anchor xml:id="__file_validator_json_test_8java_source_1l00008"/>00008 <emphasis role="keyword">import</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;org.junit.jupiter.api.Assertions.assertEquals;
<anchor xml:id="__file_validator_json_test_8java_source_1l00009"/>00009 <emphasis role="keyword">import</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;org.junit.jupiter.api.Assertions.assertFalse;
<anchor xml:id="__file_validator_json_test_8java_source_1l00010"/>00010 <emphasis role="keyword">import</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;org.junit.jupiter.api.Assertions.assertThrows;
<anchor xml:id="__file_validator_json_test_8java_source_1l00011"/>00011 <emphasis role="keyword">import</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;org.junit.jupiter.api.Assertions.assertTrue;
<anchor xml:id="__file_validator_json_test_8java_source_1l00012"/>00012 
<anchor xml:id="__file_validator_json_test_8java_source_1l00013"/>00013 <emphasis role="keyword">import</emphasis>&#32;com.itextpdf.text.Document;
<anchor xml:id="__file_validator_json_test_8java_source_1l00014"/>00014 <emphasis role="keyword">import</emphasis>&#32;com.itextpdf.text.PageSize;
<anchor xml:id="__file_validator_json_test_8java_source_1l00015"/>00015 <emphasis role="keyword">import</emphasis>&#32;com.itextpdf.text.Paragraph;
<anchor xml:id="__file_validator_json_test_8java_source_1l00016"/>00016 <emphasis role="keyword">import</emphasis>&#32;com.itextpdf.text.pdf.PdfWriter;
<anchor xml:id="__file_validator_json_test_8java_source_1l00017"/>00017 
<anchor xml:id="__file_validator_json_test_8java_source_1l00018"/>00018 <emphasis role="keyword">import</emphasis>&#32;java.io.ByteArrayOutputStream;
<anchor xml:id="__file_validator_json_test_8java_source_1l00019"/>00019 <emphasis role="keyword">import</emphasis>&#32;java.nio.file.Files;
<anchor xml:id="__file_validator_json_test_8java_source_1l00020"/>00020 <emphasis role="keyword">import</emphasis>&#32;java.nio.file.Paths;
<anchor xml:id="__file_validator_json_test_8java_source_1l00021"/>00021 <emphasis role="keyword">import</emphasis>&#32;java.util.UUID;
<anchor xml:id="__file_validator_json_test_8java_source_1l00022"/>00022 
<anchor xml:id="__file_validator_json_test_8java_source_1l00023"/>00023 
<anchor xml:id="__file_validator_json_test_8java_source_1l00024"/>00024 
<anchor xml:id="__file_validator_json_test_8java_source_1l00025"/>00025 
<anchor xml:id="__file_validator_json_test_8java_source_1l00026"/><link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_json_test">00026</link> <emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_json_test">FileValidatorJsonTest</link>&#32;{
<anchor xml:id="__file_validator_json_test_8java_source_1l00027"/>00027 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">final</emphasis>&#32;String&#32;testUsername&#32;=&#32;System.getProperty(<emphasis role="stringliteral">&quot;user.name&quot;</emphasis>);
<anchor xml:id="__file_validator_json_test_8java_source_1l00028"/>00028 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">final</emphasis>&#32;String&#32;testPluginSuccessCommand&#32;=&#32;System.getProperty(<emphasis role="stringliteral">&quot;os.name&quot;</emphasis>).startsWith(<emphasis role="stringliteral">&quot;Windows&quot;</emphasis>)?
<anchor xml:id="__file_validator_json_test_8java_source_1l00029"/>00029 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;cmd&#32;/c&#32;copy&#32;${filePath}&#32;${filePath}.new.pdf&#32;&amp;&amp;&#32;echo&#32;Success:&#32;${filePath}.new.pdf&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;cp&#32;${filePath}&#32;${filePath}.new.pdf&#32;&amp;&amp;&#32;echo&#32;Success:&#32;${filePath}.new.pdf&quot;</emphasis>;
<anchor xml:id="__file_validator_json_test_8java_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__file_validator_json_test_8java_source_1l00031"/>00031 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">final</emphasis>&#32;String&#32;testPluginFailureCommand&#32;=&#32;System.getProperty(<emphasis role="stringliteral">&quot;os.name&quot;</emphasis>).startsWith(<emphasis role="stringliteral">&quot;Windows&quot;</emphasis>)?
<anchor xml:id="__file_validator_json_test_8java_source_1l00032"/>00032 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;cmd&#32;/c&#32;ping&#32;-n&#32;10&#32;127.0.0.1&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;ping&#32;127.0.0.1&quot;</emphasis>;
<anchor xml:id="__file_validator_json_test_8java_source_1l00033"/>00033 
<anchor xml:id="__file_validator_json_test_8java_source_1l00035"/>00035 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Config&#32;JSON&#32;objects&#32;for&#32;testing&#32;//</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00037"/>00037 <emphasis role="comment"></emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00038"/>00038 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Config&#32;JSON&#32;object&#32;for&#32;testing&#32;mime&#32;type</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00039"/>00039 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">final</emphasis>&#32;JSONObject&#32;CONFIG_JSON_MIME&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;JSONObject(<emphasis role="stringliteral">&quot;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00040"/>00040 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;\&quot;Validations\&quot;:&#32;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00041"/>00041 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;\&quot;Documents\&quot;:&#32;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00042"/>00042 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;\&quot;pdf\&quot;:&#32;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00043"/>00043 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;mime_type\&quot;:&#32;\&quot;non_existing_mime\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00044"/>00044 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;magic_bytes\&quot;:&#32;\&quot;25504446\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00045"/>00045 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;header_signatures\&quot;:&#32;\&quot;25504446\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00046"/>00046 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;footer_signatures\&quot;:&#32;\&quot;2525454f46\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00047"/>00047 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;antivirus_scan\&quot;:&#32;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00048"/>00048 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;clamav_scan.java\&quot;:&#32;[\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00049"/>00049 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;RETURN_TYPE\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00050"/>00050 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;param1\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00051"/>00051 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;param2\&quot;\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00052"/>00052 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;]},\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00053"/>00053 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;change_ownership\&quot;:&#32;true,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00054"/>00054 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;change_ownership_user\&quot;:&#32;\&quot;&quot;</emphasis>&#32;+&#32;testUsername&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00055"/>00055 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;change_ownership_mode\&quot;:&#32;\&quot;r\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00056"/>00056 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;name_encoding\&quot;:&#32;true,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00057"/>00057 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;max_size\&quot;:&#32;\&quot;4000\&quot;\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00058"/>00058 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;}\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00059"/>00059 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;}\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00060"/>00060 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;},\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00061"/>00061 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;\&quot;Plugins\&quot;:&#32;\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00062"/>00062 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;{\&quot;clean_pdf_documents1\&quot;:{\&quot;step1.step\&quot;:{\&quot;type\&quot;:\&quot;cli\&quot;,\&quot;run_before\&quot;:true,\&quot;endpoint\&quot;:\&quot;&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00063"/>00063 &#32;&#32;&#32;&#32;+&#32;testPluginSuccessCommand
<anchor xml:id="__file_validator_json_test_8java_source_1l00064"/>00064 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;,\&quot;timeout\&quot;:320,\&quot;on_timeout_or_fail\&quot;:\&quot;fail\&quot;,\&quot;response\&quot;:\&quot;Success:&#32;${step1.newFilePath}\&quot;}}}&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00065"/>00065 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;}\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00066"/>00066 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;}&quot;</emphasis>);
<anchor xml:id="__file_validator_json_test_8java_source_1l00067"/>00067 
<anchor xml:id="__file_validator_json_test_8java_source_1l00068"/>00068 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Config&#32;JSON&#32;object&#32;for&#32;testing&#32;magic&#32;bytes</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00069"/>00069 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">final</emphasis>&#32;JSONObject&#32;CONFIG_JSON_MAGIC&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;JSONObject(<emphasis role="stringliteral">&quot;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00070"/>00070 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;\&quot;Validations\&quot;:&#32;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00071"/>00071 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;\&quot;Documents\&quot;:&#32;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00072"/>00072 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;\&quot;pdf\&quot;:&#32;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00073"/>00073 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;mime_type\&quot;:&#32;\&quot;application/pdf\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00074"/>00074 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;magic_bytes\&quot;:&#32;\&quot;99999999999999999999\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00075"/>00075 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;header_signatures\&quot;:&#32;\&quot;25504446\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00076"/>00076 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;footer_signatures\&quot;:&#32;\&quot;2525454f46\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00077"/>00077 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;antivirus_scan\&quot;:&#32;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00078"/>00078 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;clamav_scan.java\&quot;:&#32;[\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00079"/>00079 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;RETURN_TYPE\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00080"/>00080 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;param1\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00081"/>00081 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;param2\&quot;\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00082"/>00082 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;]},\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00083"/>00083 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;change_ownership\&quot;:&#32;true,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00084"/>00084 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;change_ownership_user\&quot;:&#32;\&quot;&quot;</emphasis>&#32;+&#32;testUsername&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00085"/>00085 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;change_ownership_mode\&quot;:&#32;\&quot;r\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00086"/>00086 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;name_encoding\&quot;:&#32;true,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00087"/>00087 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;max_size\&quot;:&#32;\&quot;4000\&quot;\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00088"/>00088 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;}\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00089"/>00089 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;}\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00090"/>00090 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;},\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00091"/>00091 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;\&quot;Plugins\&quot;:&#32;\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00092"/>00092 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;{\&quot;clean_pdf_documents1\&quot;:{\&quot;step1.step\&quot;:{\&quot;type\&quot;:\&quot;cli\&quot;,\&quot;run_before\&quot;:true,\&quot;endpoint\&quot;:\&quot;&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00093"/>00093 &#32;&#32;&#32;&#32;+&#32;testPluginSuccessCommand
<anchor xml:id="__file_validator_json_test_8java_source_1l00094"/>00094 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;,\&quot;timeout\&quot;:320,\&quot;on_timeout_or_fail\&quot;:\&quot;fail\&quot;,\&quot;response\&quot;:\&quot;Success:&#32;${step1.newFilePath}\&quot;}}}&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00095"/>00095 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;}\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00096"/>00096 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;}&quot;</emphasis>);
<anchor xml:id="__file_validator_json_test_8java_source_1l00097"/>00097 
<anchor xml:id="__file_validator_json_test_8java_source_1l00098"/>00098 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Config&#32;JSON&#32;object&#32;for&#32;testing&#32;header&#32;signatures</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00099"/>00099 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">final</emphasis>&#32;JSONObject&#32;CONFIG_JSON_HEADER&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;JSONObject(<emphasis role="stringliteral">&quot;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00100"/>00100 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;\&quot;Validations\&quot;:&#32;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00101"/>00101 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;\&quot;Documents\&quot;:&#32;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00102"/>00102 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;\&quot;pdf\&quot;:&#32;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00103"/>00103 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;mime_type\&quot;:&#32;\&quot;application/pdf\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00104"/>00104 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;magic_bytes\&quot;:&#32;\&quot;25504446\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00105"/>00105 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;header_signatures\&quot;:&#32;\&quot;99999999999999\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00106"/>00106 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;footer_signatures\&quot;:&#32;\&quot;2525454f46\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00107"/>00107 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;antivirus_scan\&quot;:&#32;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00108"/>00108 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;clamav_scan.java\&quot;:&#32;[\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00109"/>00109 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;RETURN_TYPE\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00110"/>00110 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;param1\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00111"/>00111 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;param2\&quot;\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00112"/>00112 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;]},\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00113"/>00113 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;change_ownership\&quot;:&#32;true,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00114"/>00114 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;change_ownership_user\&quot;:&#32;\&quot;&quot;</emphasis>&#32;+&#32;testUsername&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00115"/>00115 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;change_ownership_mode\&quot;:&#32;\&quot;r\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00116"/>00116 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;name_encoding\&quot;:&#32;true,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00117"/>00117 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;max_size\&quot;:&#32;\&quot;4000\&quot;\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00118"/>00118 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;}\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00119"/>00119 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;}\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00120"/>00120 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;},\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00121"/>00121 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;\&quot;Plugins\&quot;:&#32;\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00122"/>00122 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;{\&quot;clean_pdf_documents1\&quot;:{\&quot;step1.step\&quot;:{\&quot;type\&quot;:\&quot;cli\&quot;,\&quot;run_before\&quot;:true,\&quot;endpoint\&quot;:\&quot;&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00123"/>00123 &#32;&#32;&#32;&#32;+&#32;testPluginSuccessCommand
<anchor xml:id="__file_validator_json_test_8java_source_1l00124"/>00124 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;,\&quot;timeout\&quot;:320,\&quot;on_timeout_or_fail\&quot;:\&quot;fail\&quot;,\&quot;response\&quot;:\&quot;Success:&#32;${step1.newFilePath}\&quot;}}}&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00125"/>00125 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;}\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00126"/>00126 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;}&quot;</emphasis>);
<anchor xml:id="__file_validator_json_test_8java_source_1l00127"/>00127 
<anchor xml:id="__file_validator_json_test_8java_source_1l00128"/>00128 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Config&#32;JSON&#32;object&#32;for&#32;testing&#32;header&#32;signatures</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00129"/>00129 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">final</emphasis>&#32;JSONObject&#32;CONFIG_JSON_FOOTER&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;JSONObject(<emphasis role="stringliteral">&quot;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00130"/>00130 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;\&quot;Validations\&quot;:&#32;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00131"/>00131 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;\&quot;Documents\&quot;:&#32;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00132"/>00132 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;\&quot;pdf\&quot;:&#32;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00133"/>00133 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;mime_type\&quot;:&#32;\&quot;application/pdf\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00134"/>00134 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;magic_bytes\&quot;:&#32;\&quot;25504446\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00135"/>00135 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;header_signatures\&quot;:&#32;\&quot;25504446\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00136"/>00136 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;footer_signatures\&quot;:&#32;\&quot;99999999999999999\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00137"/>00137 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;antivirus_scan\&quot;:&#32;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00138"/>00138 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;clamav_scan.java\&quot;:&#32;[\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00139"/>00139 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;RETURN_TYPE\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00140"/>00140 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;param1\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00141"/>00141 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;param2\&quot;\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00142"/>00142 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;]},\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00143"/>00143 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;change_ownership\&quot;:&#32;true,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00144"/>00144 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;change_ownership_user\&quot;:&#32;\&quot;&quot;</emphasis>&#32;+&#32;testUsername&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00145"/>00145 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;change_ownership_mode\&quot;:&#32;\&quot;r\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00146"/>00146 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;name_encoding\&quot;:&#32;true,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00147"/>00147 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;max_size\&quot;:&#32;\&quot;4000\&quot;\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00148"/>00148 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;}\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00149"/>00149 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;}\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00150"/>00150 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;},\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00151"/>00151 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;\&quot;Plugins\&quot;:&#32;\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00152"/>00152 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;{\&quot;clean_pdf_documents1\&quot;:{\&quot;step1.step\&quot;:{\&quot;type\&quot;:\&quot;cli\&quot;,\&quot;run_before\&quot;:true,\&quot;endpoint\&quot;:\&quot;&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00153"/>00153 &#32;&#32;&#32;&#32;+&#32;testPluginSuccessCommand
<anchor xml:id="__file_validator_json_test_8java_source_1l00154"/>00154 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;,\&quot;timeout\&quot;:320,\&quot;on_timeout_or_fail\&quot;:\&quot;fail\&quot;,\&quot;response\&quot;:\&quot;Success:&#32;${step1.newFilePath}\&quot;}}}&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00155"/>00155 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;}\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00156"/>00156 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;}&quot;</emphasis>);
<anchor xml:id="__file_validator_json_test_8java_source_1l00157"/>00157 
<anchor xml:id="__file_validator_json_test_8java_source_1l00158"/>00158 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Config&#32;JSON&#32;object&#32;for&#32;testing&#32;name&#32;encoding&#32;false</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00159"/>00159 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">final</emphasis>&#32;JSONObject&#32;CONFIG_JSON_ENCODE&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;JSONObject(<emphasis role="stringliteral">&quot;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00160"/>00160 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;\&quot;Validations\&quot;:&#32;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00161"/>00161 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;\&quot;Documents\&quot;:&#32;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00162"/>00162 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;\&quot;pdf\&quot;:&#32;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00163"/>00163 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;mime_type\&quot;:&#32;\&quot;application/pdf\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00164"/>00164 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;magic_bytes\&quot;:&#32;\&quot;25504446\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00165"/>00165 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;header_signatures\&quot;:&#32;\&quot;25504446\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00166"/>00166 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;footer_signatures\&quot;:&#32;\&quot;2525454f46\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00167"/>00167 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;antivirus_scan\&quot;:&#32;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00168"/>00168 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;clamav_scan.java\&quot;:&#32;[\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00169"/>00169 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;RETURN_TYPE\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00170"/>00170 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;param1\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00171"/>00171 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;param2\&quot;\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00172"/>00172 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;]},\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00173"/>00173 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;change_ownership\&quot;:&#32;true,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00174"/>00174 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;change_ownership_user\&quot;:&#32;\&quot;&quot;</emphasis>&#32;+&#32;testUsername&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00175"/>00175 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;change_ownership_mode\&quot;:&#32;\&quot;r\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00176"/>00176 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;name_encoding\&quot;:&#32;false,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00177"/>00177 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;max_size\&quot;:&#32;\&quot;4000\&quot;\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00178"/>00178 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;}\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00179"/>00179 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;}\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00180"/>00180 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;},\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00181"/>00181 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;\&quot;Plugins\&quot;:&#32;\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00182"/>00182 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;{\&quot;clean_pdf_documents1\&quot;:{\&quot;step1.step\&quot;:{\&quot;type\&quot;:\&quot;cli\&quot;,\&quot;run_before\&quot;:true,\&quot;endpoint\&quot;:\&quot;&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00183"/>00183 &#32;&#32;&#32;&#32;+&#32;testPluginSuccessCommand
<anchor xml:id="__file_validator_json_test_8java_source_1l00184"/>00184 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;,\&quot;timeout\&quot;:320,\&quot;on_timeout_or_fail\&quot;:\&quot;fail\&quot;,\&quot;response\&quot;:\&quot;Success:&#32;${step1.newFilePath}\&quot;}}}&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00185"/>00185 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;}\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00186"/>00186 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;}&quot;</emphasis>);
<anchor xml:id="__file_validator_json_test_8java_source_1l00187"/>00187 
<anchor xml:id="__file_validator_json_test_8java_source_1l00188"/>00188 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Config&#32;JSON&#32;object&#32;for&#32;testing&#32;size&#32;0</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00189"/>00189 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">final</emphasis>&#32;JSONObject&#32;CONFIG_JSON_SIZE&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;JSONObject(<emphasis role="stringliteral">&quot;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00190"/>00190 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;\&quot;Validations\&quot;:&#32;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00191"/>00191 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;\&quot;Documents\&quot;:&#32;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00192"/>00192 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;\&quot;pdf\&quot;:&#32;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00193"/>00193 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;mime_type\&quot;:&#32;\&quot;application/pdf\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00194"/>00194 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;magic_bytes\&quot;:&#32;\&quot;25504446\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00195"/>00195 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;header_signatures\&quot;:&#32;\&quot;25504446\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00196"/>00196 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;footer_signatures\&quot;:&#32;\&quot;2525454f46\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00197"/>00197 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;antivirus_scan\&quot;:&#32;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00198"/>00198 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;clamav_scan.java\&quot;:&#32;[\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00199"/>00199 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;RETURN_TYPE\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00200"/>00200 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;param1\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00201"/>00201 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;param2\&quot;\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00202"/>00202 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;]},\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00203"/>00203 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;change_ownership\&quot;:&#32;true,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00204"/>00204 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;change_ownership_user\&quot;:&#32;\&quot;&quot;</emphasis>&#32;+&#32;testUsername&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00205"/>00205 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;change_ownership_mode\&quot;:&#32;\&quot;r\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00206"/>00206 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;name_encoding\&quot;:&#32;true,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00207"/>00207 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;max_size\&quot;:&#32;\&quot;0\&quot;\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00208"/>00208 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;}\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00209"/>00209 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;}\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00210"/>00210 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;},\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00211"/>00211 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;\&quot;Plugins\&quot;:&#32;\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00212"/>00212 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;{\&quot;clean_pdf_documents1\&quot;:{\&quot;step1.step\&quot;:{\&quot;type\&quot;:\&quot;cli\&quot;,\&quot;run_before\&quot;:true,\&quot;endpoint\&quot;:\&quot;&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00213"/>00213 &#32;&#32;&#32;&#32;+&#32;testPluginSuccessCommand
<anchor xml:id="__file_validator_json_test_8java_source_1l00214"/>00214 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;,\&quot;timeout\&quot;:320,\&quot;on_timeout_or_fail\&quot;:\&quot;fail\&quot;,\&quot;response\&quot;:\&quot;Success:&#32;${step1.newFilePath}\&quot;}}}&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00215"/>00215 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;}\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00216"/>00216 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;}&quot;</emphasis>);
<anchor xml:id="__file_validator_json_test_8java_source_1l00217"/>00217 
<anchor xml:id="__file_validator_json_test_8java_source_1l00218"/>00218 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Config&#32;JSON&#32;object&#32;for&#32;testing&#32;only&#32;basic&#32;parameters</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00219"/>00219 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">final</emphasis>&#32;JSONObject&#32;CONFIG_JSON_BASIC&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;JSONObject(<emphasis role="stringliteral">&quot;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00220"/>00220 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;\&quot;Validations\&quot;:&#32;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00221"/>00221 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;\&quot;Documents\&quot;:&#32;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00222"/>00222 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;\&quot;pdf\&quot;:&#32;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00223"/>00223 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;mime_type\&quot;:&#32;\&quot;application/pdf\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00224"/>00224 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;magic_bytes\&quot;:&#32;\&quot;25504446\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00225"/>00225 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;header_signatures\&quot;:&#32;\&quot;25504446\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00226"/>00226 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;footer_signatures\&quot;:&#32;\&quot;2525454f46\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00227"/>00227 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;max_size\&quot;:&#32;\&quot;4000\&quot;\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00228"/>00228 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;}\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00229"/>00229 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;}\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00230"/>00230 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;},\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00231"/>00231 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;\&quot;Plugins\&quot;:&#32;\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00232"/>00232 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;{\&quot;clean_pdf_documents1\&quot;:{\&quot;step1.step\&quot;:{\&quot;type\&quot;:\&quot;cli\&quot;,\&quot;run_before\&quot;:true,\&quot;endpoint\&quot;:\&quot;&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00233"/>00233 &#32;&#32;&#32;&#32;+&#32;testPluginSuccessCommand
<anchor xml:id="__file_validator_json_test_8java_source_1l00234"/>00234 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;,\&quot;timeout\&quot;:320,\&quot;on_timeout_or_fail\&quot;:\&quot;fail\&quot;,\&quot;response\&quot;:\&quot;Success:&#32;${step1.newFilePath}\&quot;}}}&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00235"/>00235 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;}\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00236"/>00236 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;}&quot;</emphasis>);
<anchor xml:id="__file_validator_json_test_8java_source_1l00237"/>00237 
<anchor xml:id="__file_validator_json_test_8java_source_1l00238"/>00238 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Config&#32;JSON&#32;object&#32;for&#32;testing&#32;without&#32;mime&#32;type</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00239"/>00239 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">final</emphasis>&#32;JSONObject&#32;CONFIG_JSON_NOMIME&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;JSONObject(<emphasis role="stringliteral">&quot;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00240"/>00240 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;\&quot;Validations\&quot;:&#32;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00241"/>00241 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;\&quot;Documents\&quot;:&#32;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00242"/>00242 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;\&quot;pdf\&quot;:&#32;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00243"/>00243 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;magic_bytes\&quot;:&#32;\&quot;25504446\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00244"/>00244 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;header_signatures\&quot;:&#32;\&quot;25504446\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00245"/>00245 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;footer_signatures\&quot;:&#32;\&quot;2525454f46\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00246"/>00246 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;max_size\&quot;:&#32;\&quot;4000\&quot;\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00247"/>00247 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;}\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00248"/>00248 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;}\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00249"/>00249 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;},\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00250"/>00250 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;\&quot;Plugins\&quot;:&#32;\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00251"/>00251 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;{\&quot;clean_pdf_documents1\&quot;:{\&quot;step1.step\&quot;:{\&quot;type\&quot;:\&quot;cli\&quot;,\&quot;run_before\&quot;:true,\&quot;endpoint\&quot;:\&quot;&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00252"/>00252 &#32;&#32;&#32;&#32;+&#32;testPluginSuccessCommand
<anchor xml:id="__file_validator_json_test_8java_source_1l00253"/>00253 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;,\&quot;timeout\&quot;:320,\&quot;on_timeout_or_fail\&quot;:\&quot;fail\&quot;,\&quot;response\&quot;:\&quot;Success:&#32;${step1.newFilePath}\&quot;}}}&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00254"/>00254 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;}\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00255"/>00255 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;}&quot;</emphasis>);
<anchor xml:id="__file_validator_json_test_8java_source_1l00256"/>00256 
<anchor xml:id="__file_validator_json_test_8java_source_1l00257"/>00257 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Config&#32;JSON&#32;object&#32;for&#32;testing&#32;without&#32;magic&#32;bytes</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00258"/>00258 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">final</emphasis>&#32;JSONObject&#32;CONFIG_JSON_NOMAGIC&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;JSONObject(<emphasis role="stringliteral">&quot;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00259"/>00259 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;\&quot;Validations\&quot;:&#32;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00260"/>00260 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;\&quot;Documents\&quot;:&#32;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00261"/>00261 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;\&quot;pdf\&quot;:&#32;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00262"/>00262 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;mime_type\&quot;:&#32;\&quot;application/pdf\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00263"/>00263 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;header_signatures\&quot;:&#32;\&quot;25504446\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00264"/>00264 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;footer_signatures\&quot;:&#32;\&quot;2525454f46\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00265"/>00265 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;max_size\&quot;:&#32;\&quot;4000\&quot;\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00266"/>00266 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;}\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00267"/>00267 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;}\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00268"/>00268 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;},\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00269"/>00269 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;\&quot;Plugins\&quot;:&#32;\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00270"/>00270 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;{\&quot;clean_pdf_documents1\&quot;:{\&quot;step1.step\&quot;:{\&quot;type\&quot;:\&quot;cli\&quot;,\&quot;run_before\&quot;:true,\&quot;endpoint\&quot;:\&quot;&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00271"/>00271 &#32;&#32;&#32;&#32;+&#32;testPluginSuccessCommand
<anchor xml:id="__file_validator_json_test_8java_source_1l00272"/>00272 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;,\&quot;timeout\&quot;:320,\&quot;on_timeout_or_fail\&quot;:\&quot;fail\&quot;,\&quot;response\&quot;:\&quot;Success:&#32;${step1.newFilePath}\&quot;}}}&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00273"/>00273 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;}\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00274"/>00274 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;}&quot;</emphasis>);
<anchor xml:id="__file_validator_json_test_8java_source_1l00275"/>00275 
<anchor xml:id="__file_validator_json_test_8java_source_1l00276"/>00276 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Config&#32;JSON&#32;object&#32;for&#32;testing&#32;without&#32;header&#32;and&#32;footer&#32;signatures</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00277"/>00277 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">final</emphasis>&#32;JSONObject&#32;CONFIG_JSON_NOSIGS&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;JSONObject(<emphasis role="stringliteral">&quot;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00278"/>00278 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;\&quot;Validations\&quot;:&#32;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00279"/>00279 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;\&quot;Documents\&quot;:&#32;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00280"/>00280 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;\&quot;pdf\&quot;:&#32;{\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00281"/>00281 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;mime_type\&quot;:&#32;\&quot;application/pdf\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00282"/>00282 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;magic_bytes\&quot;:&#32;\&quot;25504446\&quot;,\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00283"/>00283 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;\&quot;max_size\&quot;:&#32;\&quot;4000\&quot;\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00284"/>00284 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;}\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00285"/>00285 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;}\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00286"/>00286 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;},\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00287"/>00287 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;\&quot;Plugins\&quot;:&#32;\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00288"/>00288 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;{\&quot;clean_pdf_documents1\&quot;:{\&quot;step1.step\&quot;:{\&quot;type\&quot;:\&quot;cli\&quot;,\&quot;run_before\&quot;:true,\&quot;endpoint\&quot;:\&quot;&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00289"/>00289 &#32;&#32;&#32;&#32;+&#32;testPluginSuccessCommand
<anchor xml:id="__file_validator_json_test_8java_source_1l00290"/>00290 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;\&quot;,\&quot;timeout\&quot;:320,\&quot;on_timeout_or_fail\&quot;:\&quot;fail\&quot;,\&quot;response\&quot;:\&quot;Success:&#32;${step1.newFilePath}\&quot;}}}&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00291"/>00291 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;&#32;&#32;}\r\n&quot;</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00292"/>00292 &#32;&#32;&#32;&#32;+&#32;<emphasis role="stringliteral">&quot;}&quot;</emphasis>);
<anchor xml:id="__file_validator_json_test_8java_source_1l00293"/>00293 
<anchor xml:id="__file_validator_json_test_8java_source_1l00294"/>00294 &#32;&#32;&#32;&#32;
<anchor xml:id="__file_validator_json_test_8java_source_1l00295"/>00295 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Test&#32;step&#32;timeout</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00296"/>00296 &#32;&#32;&#32;&#32;@Test
<anchor xml:id="__file_validator_json_test_8java_source_1l00297"/><link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_json_test_1ae70ade4da3ae3ce3b4acedd7e4217780">00297</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_json_test_1ae70ade4da3ae3ce3b4acedd7e4217780">testStepTimeout</link>()&#32;throws&#32;Exception&#32;{
<anchor xml:id="__file_validator_json_test_8java_source_1l00298"/>00298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;fileInBytes&#32;=&#32;generatePdfBytes(25000);
<anchor xml:id="__file_validator_json_test_8java_source_1l00299"/>00299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;String&#32;fileName&#32;=&#32;<emphasis role="stringliteral">&quot;test.pdf&quot;</emphasis>;
<anchor xml:id="__file_validator_json_test_8java_source_1l00300"/>00300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;String&#32;jsonConfigContent&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;String(Files.readAllBytes(Paths.get(<emphasis role="stringliteral">&quot;src&quot;</emphasis>,<emphasis role="stringliteral">&quot;test&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;resources&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;configTestPluginTimeout.json&quot;</emphasis>).toAbsolutePath()));
<anchor xml:id="__file_validator_json_test_8java_source_1l00301"/>00301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;JSONObject&#32;jsonObject&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;JSONObject(jsonConfigContent);
<anchor xml:id="__file_validator_json_test_8java_source_1l00302"/>00302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator">FileValidator</link>&#32;validator&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator">FileValidator</link>(jsonObject);
<anchor xml:id="__file_validator_json_test_8java_source_1l00303"/>00303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_validation_response">ValidationResponse</link>&#32;fileValidationResults&#32;=&#32;validator.<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_1a0c42ecd30b213d35bf114d84e7b40f9f">validateFile</link>(<emphasis role="stringliteral">&quot;Documents&quot;</emphasis>,&#32;fileInBytes,&#32;fileName);
<anchor xml:id="__file_validator_json_test_8java_source_1l00304"/>00304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertFalse(fileValidationResults.isValid(),&#32;<emphasis role="stringliteral">&quot;Expected&#32;validation&#32;response&#32;to&#32;be&#32;invalid,&#32;got:&#32;&quot;</emphasis>&#32;+&#32;fileValidationResults.resultsInfo());
<anchor xml:id="__file_validator_json_test_8java_source_1l00305"/>00305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertTrue(fileValidationResults.resultsInfo().contains(<emphasis role="stringliteral">&quot;timeout&quot;</emphasis>),&#32;<emphasis role="stringliteral">&quot;Expected&#32;validation&#32;response&#32;to&#32;contain&#32;timeout&quot;</emphasis>);
<anchor xml:id="__file_validator_json_test_8java_source_1l00306"/>00306 &#32;&#32;&#32;&#32;}
<anchor xml:id="__file_validator_json_test_8java_source_1l00307"/>00307 
<anchor xml:id="__file_validator_json_test_8java_source_1l00308"/>00308 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Test&#32;step&#32;failure</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00309"/>00309 &#32;&#32;&#32;&#32;@Test
<anchor xml:id="__file_validator_json_test_8java_source_1l00310"/><link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_json_test_1addff6ff1e3e393d22f709686c73bd614">00310</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_json_test_1addff6ff1e3e393d22f709686c73bd614">testStepfailure</link>()&#32;throws&#32;Exception&#32;{
<anchor xml:id="__file_validator_json_test_8java_source_1l00311"/>00311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;fileInBytes&#32;=&#32;generatePdfBytes(25000);
<anchor xml:id="__file_validator_json_test_8java_source_1l00312"/>00312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;String&#32;fileName&#32;=&#32;<emphasis role="stringliteral">&quot;test.pdf&quot;</emphasis>;
<anchor xml:id="__file_validator_json_test_8java_source_1l00313"/>00313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;String&#32;jsonConfigContent&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;String(Files.readAllBytes(Paths.get(<emphasis role="stringliteral">&quot;src&quot;</emphasis>,<emphasis role="stringliteral">&quot;test&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;resources&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;configTestPluginFailure.json&quot;</emphasis>).toAbsolutePath()));
<anchor xml:id="__file_validator_json_test_8java_source_1l00314"/>00314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;JSONObject&#32;jsonObject&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;JSONObject(jsonConfigContent);
<anchor xml:id="__file_validator_json_test_8java_source_1l00315"/>00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator">FileValidator</link>&#32;validator&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator">FileValidator</link>(jsonObject);
<anchor xml:id="__file_validator_json_test_8java_source_1l00316"/>00316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_validation_response">ValidationResponse</link>&#32;fileValidationResults&#32;=&#32;validator.<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_1a0c42ecd30b213d35bf114d84e7b40f9f">validateFile</link>(<emphasis role="stringliteral">&quot;Documents&quot;</emphasis>,&#32;fileInBytes,&#32;fileName);
<anchor xml:id="__file_validator_json_test_8java_source_1l00317"/>00317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertFalse(fileValidationResults.isValid(),&#32;<emphasis role="stringliteral">&quot;Expected&#32;validation&#32;response&#32;to&#32;be&#32;invalid&quot;</emphasis>);
<anchor xml:id="__file_validator_json_test_8java_source_1l00318"/>00318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertTrue(fileValidationResults.resultsInfo().contains(<emphasis role="stringliteral">&quot;Error&quot;</emphasis>),&#32;<emphasis role="stringliteral">&quot;Expected&#32;validation&#32;response&#32;to&#32;contain&#32;fail&quot;</emphasis>);
<anchor xml:id="__file_validator_json_test_8java_source_1l00319"/>00319 &#32;&#32;&#32;&#32;}
<anchor xml:id="__file_validator_json_test_8java_source_1l00320"/>00320 
<anchor xml:id="__file_validator_json_test_8java_source_1l00321"/>00321 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Test&#32;non&#32;existing&#32;plugin&#32;load&#32;failure</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00322"/>00322 &#32;&#32;&#32;&#32;@Test
<anchor xml:id="__file_validator_json_test_8java_source_1l00323"/><link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_json_test_1accaab272204ff05cadb3e832529015bc">00323</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_json_test_1accaab272204ff05cadb3e832529015bc">testPluginLoadFailue</link>()&#32;throws&#32;Exception&#32;{
<anchor xml:id="__file_validator_json_test_8java_source_1l00324"/>00324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;String&#32;jsonConfigContent&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;String(Files.readAllBytes(Paths.get(<emphasis role="stringliteral">&quot;src&quot;</emphasis>,<emphasis role="stringliteral">&quot;test&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;resources&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;configTestPluginLoadFailure.json&quot;</emphasis>).toAbsolutePath()));
<anchor xml:id="__file_validator_json_test_8java_source_1l00325"/>00325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;JSONObject&#32;jsonObject&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;JSONObject(jsonConfigContent);
<anchor xml:id="__file_validator_json_test_8java_source_1l00326"/>00326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Throwable&#32;exception&#32;=&#32;assertThrows(IllegalArgumentException.class,&#32;()&#32;-&gt;&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator">FileValidator</link>(jsonObject));
<anchor xml:id="__file_validator_json_test_8java_source_1l00327"/>00327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertTrue(exception.getMessage().contains(<emphasis role="stringliteral">&quot;defined&#32;in&#32;config&#32;does&#32;not&#32;exist&#32;in&#32;plugins&#32;configuration&quot;</emphasis>),&#32;
<anchor xml:id="__file_validator_json_test_8java_source_1l00328"/>00328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Expected&#32;exception&#32;to&#32;contain&#32;&apos;config&#32;does&#32;not&#32;exist&#32;in&#32;plugins&#32;configuration&apos;.&quot;</emphasis>);
<anchor xml:id="__file_validator_json_test_8java_source_1l00329"/>00329 &#32;&#32;&#32;&#32;}
<anchor xml:id="__file_validator_json_test_8java_source_1l00330"/>00330 
<anchor xml:id="__file_validator_json_test_8java_source_1l00331"/>00331 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Test&#32;missing&#32;plugin&#32;keys</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00332"/>00332 &#32;&#32;&#32;&#32;@Test
<anchor xml:id="__file_validator_json_test_8java_source_1l00333"/><link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_json_test_1a089caaeee5e74f23e462658b47c41aae">00333</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_json_test_1a089caaeee5e74f23e462658b47c41aae">testPluginKeysFailue</link>()&#32;throws&#32;Exception&#32;{
<anchor xml:id="__file_validator_json_test_8java_source_1l00334"/>00334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;String&#32;jsonConfigContent&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;String(Files.readAllBytes(Paths.get(<emphasis role="stringliteral">&quot;src&quot;</emphasis>,<emphasis role="stringliteral">&quot;test&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;resources&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;configTestPluginConfigFailure.json&quot;</emphasis>).toAbsolutePath()));
<anchor xml:id="__file_validator_json_test_8java_source_1l00335"/>00335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;JSONObject&#32;jsonObject&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;JSONObject(jsonConfigContent);
<anchor xml:id="__file_validator_json_test_8java_source_1l00336"/>00336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Throwable&#32;exception&#32;=&#32;assertThrows(IllegalArgumentException.class,&#32;()&#32;-&gt;&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator">FileValidator</link>(jsonObject));
<anchor xml:id="__file_validator_json_test_8java_source_1l00337"/>00337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertTrue(exception.getMessage().contains(<emphasis role="stringliteral">&quot;Error&#32;initializing&#32;plugins:&#32;JSONObject&quot;</emphasis>),&#32;
<anchor xml:id="__file_validator_json_test_8java_source_1l00338"/>00338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Expected&#32;exception&#32;to&#32;contain&#32;&apos;Error&#32;initializing&#32;plugins:&#32;JSONObject&apos;.&quot;</emphasis>);
<anchor xml:id="__file_validator_json_test_8java_source_1l00339"/>00339 &#32;&#32;&#32;&#32;}
<anchor xml:id="__file_validator_json_test_8java_source_1l00340"/>00340 
<anchor xml:id="__file_validator_json_test_8java_source_1l00341"/>00341 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Test&#32;invalid&#32;mime&#32;type&#32;in&#32;json&#32;config</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00342"/>00342 &#32;&#32;&#32;&#32;@Test
<anchor xml:id="__file_validator_json_test_8java_source_1l00343"/><link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_json_test_1aef4bfeca1724cb089dddc1add792316c">00343</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_json_test_1aef4bfeca1724cb089dddc1add792316c">testInValidMime</link>()&#32;throws&#32;Exception&#32;{
<anchor xml:id="__file_validator_json_test_8java_source_1l00344"/>00344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;fileInBytes&#32;=&#32;generatePdfBytes(250000);
<anchor xml:id="__file_validator_json_test_8java_source_1l00345"/>00345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;String&#32;fileName&#32;=&#32;<emphasis role="stringliteral">&quot;test.pdf&quot;</emphasis>;
<anchor xml:id="__file_validator_json_test_8java_source_1l00346"/>00346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator">FileValidator</link>&#32;validator&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator">FileValidator</link>(CONFIG_JSON_MIME);
<anchor xml:id="__file_validator_json_test_8java_source_1l00347"/>00347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_validation_response">ValidationResponse</link>&#32;fileValidationResults&#32;=&#32;validator.<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_1a0c42ecd30b213d35bf114d84e7b40f9f">validateFile</link>(<emphasis role="stringliteral">&quot;Documents&quot;</emphasis>,&#32;fileInBytes,&#32;fileName);
<anchor xml:id="__file_validator_json_test_8java_source_1l00348"/>00348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertFalse(fileValidationResults.isValid(),&#32;<emphasis role="stringliteral">&quot;Expected&#32;validation&#32;response&#32;to&#32;be&#32;invalid&quot;</emphasis>);
<anchor xml:id="__file_validator_json_test_8java_source_1l00349"/>00349 &#32;&#32;&#32;&#32;}
<anchor xml:id="__file_validator_json_test_8java_source_1l00350"/>00350 
<anchor xml:id="__file_validator_json_test_8java_source_1l00351"/>00351 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Test&#32;invalid&#32;magic&#32;bytes&#32;in&#32;json&#32;config</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00352"/>00352 &#32;&#32;&#32;&#32;@Test
<anchor xml:id="__file_validator_json_test_8java_source_1l00353"/><link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_json_test_1abe58b7ca037bdd69d1fd1c19f81dcb20">00353</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_json_test_1abe58b7ca037bdd69d1fd1c19f81dcb20">testInValidMagic</link>()&#32;throws&#32;Exception&#32;{
<anchor xml:id="__file_validator_json_test_8java_source_1l00354"/>00354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;fileInBytes&#32;=&#32;generatePdfBytes(250000);
<anchor xml:id="__file_validator_json_test_8java_source_1l00355"/>00355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;String&#32;fileName&#32;=&#32;<emphasis role="stringliteral">&quot;test.pdf&quot;</emphasis>;
<anchor xml:id="__file_validator_json_test_8java_source_1l00356"/>00356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator">FileValidator</link>&#32;validator&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator">FileValidator</link>(CONFIG_JSON_MAGIC);
<anchor xml:id="__file_validator_json_test_8java_source_1l00357"/>00357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_validation_response">ValidationResponse</link>&#32;fileValidationResults&#32;=&#32;validator.<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_1a0c42ecd30b213d35bf114d84e7b40f9f">validateFile</link>(<emphasis role="stringliteral">&quot;Documents&quot;</emphasis>,&#32;fileInBytes,&#32;fileName);
<anchor xml:id="__file_validator_json_test_8java_source_1l00358"/>00358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertFalse(fileValidationResults.isValid(),&#32;<emphasis role="stringliteral">&quot;Expected&#32;validation&#32;response&#32;to&#32;be&#32;invalid&quot;</emphasis>);
<anchor xml:id="__file_validator_json_test_8java_source_1l00359"/>00359 &#32;&#32;&#32;&#32;}
<anchor xml:id="__file_validator_json_test_8java_source_1l00360"/>00360 
<anchor xml:id="__file_validator_json_test_8java_source_1l00361"/>00361 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Test&#32;invalid&#32;header&#32;signatures&#32;in&#32;json&#32;config</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00362"/>00362 &#32;&#32;&#32;&#32;@Test
<anchor xml:id="__file_validator_json_test_8java_source_1l00363"/><link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_json_test_1abed39eeda356b1c735b926c2323d7f74">00363</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_json_test_1abed39eeda356b1c735b926c2323d7f74">testInValidMagicHeader</link>()&#32;throws&#32;Exception&#32;{
<anchor xml:id="__file_validator_json_test_8java_source_1l00364"/>00364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;fileInBytes&#32;=&#32;generatePdfBytes(250000);
<anchor xml:id="__file_validator_json_test_8java_source_1l00365"/>00365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;String&#32;fileName&#32;=&#32;<emphasis role="stringliteral">&quot;test.pdf&quot;</emphasis>;
<anchor xml:id="__file_validator_json_test_8java_source_1l00366"/>00366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator">FileValidator</link>&#32;validator&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator">FileValidator</link>(CONFIG_JSON_HEADER);
<anchor xml:id="__file_validator_json_test_8java_source_1l00367"/>00367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_validation_response">ValidationResponse</link>&#32;fileValidationResults&#32;=&#32;validator.<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_1a0c42ecd30b213d35bf114d84e7b40f9f">validateFile</link>(<emphasis role="stringliteral">&quot;Documents&quot;</emphasis>,&#32;fileInBytes,&#32;fileName);
<anchor xml:id="__file_validator_json_test_8java_source_1l00368"/>00368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertFalse(fileValidationResults.isValid(),&#32;<emphasis role="stringliteral">&quot;Expected&#32;validation&#32;response&#32;to&#32;be&#32;invalid&quot;</emphasis>);
<anchor xml:id="__file_validator_json_test_8java_source_1l00369"/>00369 &#32;&#32;&#32;&#32;}
<anchor xml:id="__file_validator_json_test_8java_source_1l00370"/>00370 
<anchor xml:id="__file_validator_json_test_8java_source_1l00371"/>00371 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Test&#32;invalid&#32;footer&#32;signatures&#32;in&#32;json&#32;config</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00372"/>00372 &#32;&#32;&#32;&#32;@Test
<anchor xml:id="__file_validator_json_test_8java_source_1l00373"/><link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_json_test_1a05e2ebb12fa09039cc6ccb3313f80863">00373</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_json_test_1a05e2ebb12fa09039cc6ccb3313f80863">testInValidMagicFooter</link>()&#32;throws&#32;Exception&#32;{
<anchor xml:id="__file_validator_json_test_8java_source_1l00374"/>00374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;fileInBytes&#32;=&#32;generatePdfBytes(250000);
<anchor xml:id="__file_validator_json_test_8java_source_1l00375"/>00375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;String&#32;fileName&#32;=&#32;<emphasis role="stringliteral">&quot;test.pdf&quot;</emphasis>;
<anchor xml:id="__file_validator_json_test_8java_source_1l00376"/>00376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator">FileValidator</link>&#32;validator&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator">FileValidator</link>(CONFIG_JSON_FOOTER);
<anchor xml:id="__file_validator_json_test_8java_source_1l00377"/>00377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_validation_response">ValidationResponse</link>&#32;fileValidationResults&#32;=&#32;validator.<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_1a0c42ecd30b213d35bf114d84e7b40f9f">validateFile</link>(<emphasis role="stringliteral">&quot;Documents&quot;</emphasis>,&#32;fileInBytes,&#32;fileName);
<anchor xml:id="__file_validator_json_test_8java_source_1l00378"/>00378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertFalse(fileValidationResults.isValid(),&#32;<emphasis role="stringliteral">&quot;Expected&#32;validation&#32;response&#32;to&#32;be&#32;invalid&quot;</emphasis>);
<anchor xml:id="__file_validator_json_test_8java_source_1l00379"/>00379 &#32;&#32;&#32;&#32;}
<anchor xml:id="__file_validator_json_test_8java_source_1l00380"/>00380 
<anchor xml:id="__file_validator_json_test_8java_source_1l00381"/>00381 &#32;&#32;&#32;&#32;@Test
<anchor xml:id="__file_validator_json_test_8java_source_1l00382"/><link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_json_test_1ad79b137d847adfd3ac5177acba2f8ddd">00382</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_json_test_1ad79b137d847adfd3ac5177acba2f8ddd">testJsonEncodeFalse</link>()&#32;throws&#32;Exception&#32;{
<anchor xml:id="__file_validator_json_test_8java_source_1l00383"/>00383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;fileInBytes&#32;=&#32;generatePdfBytes(250000);
<anchor xml:id="__file_validator_json_test_8java_source_1l00384"/>00384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;String&#32;fileName&#32;=&#32;<emphasis role="stringliteral">&quot;test.pdf&quot;</emphasis>;
<anchor xml:id="__file_validator_json_test_8java_source_1l00385"/>00385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator">FileValidator</link>&#32;validator&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator">FileValidator</link>(CONFIG_JSON_ENCODE);
<anchor xml:id="__file_validator_json_test_8java_source_1l00386"/>00386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_validation_response">ValidationResponse</link>&#32;fileValidationResults&#32;=&#32;validator.<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_1a0c42ecd30b213d35bf114d84e7b40f9f">validateFile</link>(<emphasis role="stringliteral">&quot;Documents&quot;</emphasis>,&#32;fileInBytes,&#32;fileName);
<anchor xml:id="__file_validator_json_test_8java_source_1l00387"/>00387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertTrue(fileValidationResults.isValid(),&#32;<emphasis role="stringliteral">&quot;Expected&#32;validation&#32;response&#32;to&#32;be&#32;invalid&quot;</emphasis>);
<anchor xml:id="__file_validator_json_test_8java_source_1l00388"/>00388 &#32;&#32;&#32;&#32;}
<anchor xml:id="__file_validator_json_test_8java_source_1l00389"/>00389 
<anchor xml:id="__file_validator_json_test_8java_source_1l00390"/>00390 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Test&#32;size&#32;0&#32;in&#32;json&#32;config</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00391"/>00391 &#32;&#32;&#32;&#32;@Test
<anchor xml:id="__file_validator_json_test_8java_source_1l00392"/><link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_json_test_1a2f41f8bc235120ec4ccd56f02a4daadb">00392</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_json_test_1a2f41f8bc235120ec4ccd56f02a4daadb">testSizeZero</link>()&#32;throws&#32;Exception&#32;{
<anchor xml:id="__file_validator_json_test_8java_source_1l00393"/>00393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;fileInBytes&#32;=&#32;generatePdfBytes(250000);
<anchor xml:id="__file_validator_json_test_8java_source_1l00394"/>00394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;String&#32;fileName&#32;=&#32;<emphasis role="stringliteral">&quot;test.pdf&quot;</emphasis>;
<anchor xml:id="__file_validator_json_test_8java_source_1l00395"/>00395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator">FileValidator</link>&#32;validator&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator">FileValidator</link>(CONFIG_JSON_SIZE);
<anchor xml:id="__file_validator_json_test_8java_source_1l00396"/>00396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_validation_response">ValidationResponse</link>&#32;fileValidationResults&#32;=&#32;validator.<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_1a0c42ecd30b213d35bf114d84e7b40f9f">validateFile</link>(<emphasis role="stringliteral">&quot;Documents&quot;</emphasis>,&#32;fileInBytes,&#32;fileName);
<anchor xml:id="__file_validator_json_test_8java_source_1l00397"/>00397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertTrue(fileValidationResults.isValid(),&#32;<emphasis role="stringliteral">&quot;Expected&#32;validation&#32;response&#32;to&#32;be&#32;invalid&quot;</emphasis>);
<anchor xml:id="__file_validator_json_test_8java_source_1l00398"/>00398 &#32;&#32;&#32;&#32;}
<anchor xml:id="__file_validator_json_test_8java_source_1l00399"/>00399 
<anchor xml:id="__file_validator_json_test_8java_source_1l00400"/>00400 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Test&#32;only&#32;basic&#32;parameters&#32;in&#32;json&#32;config</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00401"/>00401 &#32;&#32;&#32;&#32;@Test
<anchor xml:id="__file_validator_json_test_8java_source_1l00402"/><link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_json_test_1ae8737ee01062722b1417a6b70f4df2bb">00402</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_json_test_1ae8737ee01062722b1417a6b70f4df2bb">testBasicConfig</link>()&#32;throws&#32;Exception&#32;{
<anchor xml:id="__file_validator_json_test_8java_source_1l00403"/>00403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;fileInBytes&#32;=&#32;generatePdfBytes(250000);
<anchor xml:id="__file_validator_json_test_8java_source_1l00404"/>00404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;String&#32;fileName&#32;=&#32;<emphasis role="stringliteral">&quot;test.pdf&quot;</emphasis>;
<anchor xml:id="__file_validator_json_test_8java_source_1l00405"/>00405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator">FileValidator</link>&#32;validator&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator">FileValidator</link>(CONFIG_JSON_BASIC);
<anchor xml:id="__file_validator_json_test_8java_source_1l00406"/>00406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_validation_response">ValidationResponse</link>&#32;fileValidationResults&#32;=&#32;validator.<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_1a0c42ecd30b213d35bf114d84e7b40f9f">validateFile</link>(<emphasis role="stringliteral">&quot;Documents&quot;</emphasis>,&#32;fileInBytes,&#32;fileName);
<anchor xml:id="__file_validator_json_test_8java_source_1l00407"/>00407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertTrue(fileValidationResults.isValid(),&#32;<emphasis role="stringliteral">&quot;Expected&#32;validation&#32;response&#32;to&#32;be&#32;invalid&quot;</emphasis>);
<anchor xml:id="__file_validator_json_test_8java_source_1l00408"/>00408 &#32;&#32;&#32;&#32;}
<anchor xml:id="__file_validator_json_test_8java_source_1l00409"/>00409 
<anchor xml:id="__file_validator_json_test_8java_source_1l00410"/>00410 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Test&#32;no&#32;mime&#32;type&#32;in&#32;json&#32;config</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00411"/>00411 &#32;&#32;&#32;&#32;@Test
<anchor xml:id="__file_validator_json_test_8java_source_1l00412"/><link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_json_test_1a4611b33e92d7b90d8df69148bdbf18e2">00412</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_json_test_1a4611b33e92d7b90d8df69148bdbf18e2">testNoMime</link>()&#32;throws&#32;Exception&#32;{
<anchor xml:id="__file_validator_json_test_8java_source_1l00413"/>00413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;fileInBytes&#32;=&#32;generatePdfBytes(250000);
<anchor xml:id="__file_validator_json_test_8java_source_1l00414"/>00414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;String&#32;fileName&#32;=&#32;<emphasis role="stringliteral">&quot;test.pdf&quot;</emphasis>;
<anchor xml:id="__file_validator_json_test_8java_source_1l00415"/>00415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator">FileValidator</link>&#32;validator&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator">FileValidator</link>(CONFIG_JSON_NOMIME);
<anchor xml:id="__file_validator_json_test_8java_source_1l00416"/>00416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_validation_response">ValidationResponse</link>&#32;fileValidationResults&#32;=&#32;validator.<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_1a0c42ecd30b213d35bf114d84e7b40f9f">validateFile</link>(<emphasis role="stringliteral">&quot;Documents&quot;</emphasis>,&#32;fileInBytes,&#32;fileName);
<anchor xml:id="__file_validator_json_test_8java_source_1l00417"/>00417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertFalse(fileValidationResults.isValid(),&#32;<emphasis role="stringliteral">&quot;Expected&#32;validation&#32;response&#32;to&#32;be&#32;invalid&quot;</emphasis>);
<anchor xml:id="__file_validator_json_test_8java_source_1l00418"/>00418 &#32;&#32;&#32;&#32;}
<anchor xml:id="__file_validator_json_test_8java_source_1l00419"/>00419 
<anchor xml:id="__file_validator_json_test_8java_source_1l00420"/>00420 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Test&#32;no&#32;magic&#32;bytes&#32;in&#32;json&#32;config</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00421"/>00421 &#32;&#32;&#32;&#32;@Test
<anchor xml:id="__file_validator_json_test_8java_source_1l00422"/><link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_json_test_1af4cb1128d0c4987bd701ac0d8a58c2d8">00422</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_json_test_1af4cb1128d0c4987bd701ac0d8a58c2d8">testNoMagic</link>()&#32;throws&#32;Exception&#32;{
<anchor xml:id="__file_validator_json_test_8java_source_1l00423"/>00423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;fileInBytes&#32;=&#32;generatePdfBytes(250000);
<anchor xml:id="__file_validator_json_test_8java_source_1l00424"/>00424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;String&#32;fileName&#32;=&#32;<emphasis role="stringliteral">&quot;test.pdf&quot;</emphasis>;
<anchor xml:id="__file_validator_json_test_8java_source_1l00425"/>00425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator">FileValidator</link>&#32;validator&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator">FileValidator</link>(CONFIG_JSON_NOMAGIC);
<anchor xml:id="__file_validator_json_test_8java_source_1l00426"/>00426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_validation_response">ValidationResponse</link>&#32;fileValidationResults&#32;=&#32;validator.<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_1a0c42ecd30b213d35bf114d84e7b40f9f">validateFile</link>(<emphasis role="stringliteral">&quot;Documents&quot;</emphasis>,&#32;fileInBytes,&#32;fileName);
<anchor xml:id="__file_validator_json_test_8java_source_1l00427"/>00427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertFalse(fileValidationResults.isValid(),&#32;<emphasis role="stringliteral">&quot;Expected&#32;validation&#32;response&#32;to&#32;be&#32;invalid&quot;</emphasis>);
<anchor xml:id="__file_validator_json_test_8java_source_1l00428"/>00428 &#32;&#32;&#32;&#32;}
<anchor xml:id="__file_validator_json_test_8java_source_1l00429"/>00429 
<anchor xml:id="__file_validator_json_test_8java_source_1l00430"/>00430 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Test&#32;no&#32;header&#32;and&#32;footer&#32;signatures&#32;in&#32;json&#32;config</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00431"/>00431 &#32;&#32;&#32;&#32;@Test
<anchor xml:id="__file_validator_json_test_8java_source_1l00432"/><link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_json_test_1a15e46d7300ef2f1dcc80de240f25f8aa">00432</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_json_test_1a15e46d7300ef2f1dcc80de240f25f8aa">testNoSigs</link>()&#32;throws&#32;Exception&#32;{
<anchor xml:id="__file_validator_json_test_8java_source_1l00433"/>00433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;fileInBytes&#32;=&#32;generatePdfBytes(250000);
<anchor xml:id="__file_validator_json_test_8java_source_1l00434"/>00434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;String&#32;fileName&#32;=&#32;<emphasis role="stringliteral">&quot;test.pdf&quot;</emphasis>;
<anchor xml:id="__file_validator_json_test_8java_source_1l00435"/>00435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator">FileValidator</link>&#32;validator&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator">FileValidator</link>(CONFIG_JSON_NOSIGS);
<anchor xml:id="__file_validator_json_test_8java_source_1l00436"/>00436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_validation_response">ValidationResponse</link>&#32;fileValidationResults&#32;=&#32;validator.<link linkend="_classdev_1_1filechampion_1_1filechampion4j_1_1_file_validator_1a0c42ecd30b213d35bf114d84e7b40f9f">validateFile</link>(<emphasis role="stringliteral">&quot;Documents&quot;</emphasis>,&#32;fileInBytes,&#32;fileName);
<anchor xml:id="__file_validator_json_test_8java_source_1l00437"/>00437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assertTrue(fileValidationResults.isValid(),&#32;<emphasis role="stringliteral">&quot;Expected&#32;validation&#32;response&#32;to&#32;be&#32;invalid&quot;</emphasis>);
<anchor xml:id="__file_validator_json_test_8java_source_1l00438"/>00438 &#32;&#32;&#32;&#32;}
<anchor xml:id="__file_validator_json_test_8java_source_1l00439"/>00439 
<anchor xml:id="__file_validator_json_test_8java_source_1l00440"/>00440 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Helper&#32;methods</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00441"/>00441 
<anchor xml:id="__file_validator_json_test_8java_source_1l00442"/>00442 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Generate&#32;a&#32;pdf&#32;file&#32;with&#32;a&#32;given&#32;size&#32;in&#32;bytes</emphasis>
<anchor xml:id="__file_validator_json_test_8java_source_1l00443"/>00443 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">byte</emphasis>[]&#32;generatePdfBytes(<emphasis role="keywordtype">int</emphasis>&#32;sizeInBytes)&#32;<emphasis role="keywordflow">throws</emphasis>&#32;Exception&#32;{
<anchor xml:id="__file_validator_json_test_8java_source_1l00444"/>00444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sizeInBytes&#32;&lt;=&#32;0)&#32;{
<anchor xml:id="__file_validator_json_test_8java_source_1l00445"/>00445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;IllegalArgumentException(<emphasis role="stringliteral">&quot;Size&#32;in&#32;Bytes&#32;must&#32;be&#32;a&#32;positive&#32;value.&quot;</emphasis>);
<anchor xml:id="__file_validator_json_test_8java_source_1l00446"/>00446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__file_validator_json_test_8java_source_1l00447"/>00447 
<anchor xml:id="__file_validator_json_test_8java_source_1l00448"/>00448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ByteArrayOutputStream&#32;baos&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;ByteArrayOutputStream();
<anchor xml:id="__file_validator_json_test_8java_source_1l00449"/>00449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Document&#32;document&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Document(PageSize.A4);
<anchor xml:id="__file_validator_json_test_8java_source_1l00450"/>00450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PdfWriter&#32;writer&#32;=&#32;PdfWriter.getInstance(document,&#32;baos);
<anchor xml:id="__file_validator_json_test_8java_source_1l00451"/>00451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;writer.setFullCompression();
<anchor xml:id="__file_validator_json_test_8java_source_1l00452"/>00452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;writer.setCompressionLevel(0);
<anchor xml:id="__file_validator_json_test_8java_source_1l00453"/>00453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;document.open();
<anchor xml:id="__file_validator_json_test_8java_source_1l00454"/>00454 &#32;&#32;&#32;&#32;
<anchor xml:id="__file_validator_json_test_8java_source_1l00455"/>00455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;String&#32;content&#32;=&#32;UUID.randomUUID().toString()&#32;+&#32;UUID.randomUUID().toString();
<anchor xml:id="__file_validator_json_test_8java_source_1l00456"/>00456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;contentLength&#32;=&#32;content.getBytes().length;
<anchor xml:id="__file_validator_json_test_8java_source_1l00457"/>00457 &#32;&#32;&#32;&#32;
<anchor xml:id="__file_validator_json_test_8java_source_1l00458"/>00458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(baos.size()&#32;&lt;&#32;sizeInBytes)&#32;{
<anchor xml:id="__file_validator_json_test_8java_source_1l00459"/>00459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;iterations&#32;=&#32;(sizeInBytes&#32;-&#32;baos.size())&#32;/&#32;contentLength;
<anchor xml:id="__file_validator_json_test_8java_source_1l00460"/>00460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;iterations;&#32;i++)&#32;{
<anchor xml:id="__file_validator_json_test_8java_source_1l00461"/>00461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;document.add(<emphasis role="keyword">new</emphasis>&#32;Paragraph(content));
<anchor xml:id="__file_validator_json_test_8java_source_1l00462"/>00462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__file_validator_json_test_8java_source_1l00463"/>00463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;writer.flush();
<anchor xml:id="__file_validator_json_test_8java_source_1l00464"/>00464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__file_validator_json_test_8java_source_1l00465"/>00465 &#32;&#32;&#32;&#32;
<anchor xml:id="__file_validator_json_test_8java_source_1l00466"/>00466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;document.close();
<anchor xml:id="__file_validator_json_test_8java_source_1l00467"/>00467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;writer.close();
<anchor xml:id="__file_validator_json_test_8java_source_1l00468"/>00468 &#32;&#32;&#32;&#32;
<anchor xml:id="__file_validator_json_test_8java_source_1l00469"/>00469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;baos.toByteArray();
<anchor xml:id="__file_validator_json_test_8java_source_1l00470"/>00470 &#32;&#32;&#32;&#32;}
<anchor xml:id="__file_validator_json_test_8java_source_1l00471"/>00471 
<anchor xml:id="__file_validator_json_test_8java_source_1l00472"/>00472 }
</programlisting></section>
